{"version":3,"sources":["components/HighlightCode/index.less","util/generator.js","components/SettingArea/index.jsx","components/AnnotationConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ignoreColumnName","genController","_state","tableSchema","packageName","projectName","tableName","result","UpperProjectName","_","timestamp","moment","format","concat","map","item","i","columnName","index","beautify","genDao","genService","genEntity","absMode","codingEntity","console","log","includes","getEntityCell","_item","cell","at_Id","at_GeneratedValue","at_Condition","colName","colNameCamel","colNameUpperCamel","type","at_CodingEntity","at_Reference","genXML","lowerProjectName","Map","set","xml","get","XmlBeautify","indent","useSelfClosingElement","formateConfigParam","_data","tableSchemaArray","_tableSchema","preprocessData","patt","RegExp","test","o","formatTableSchemaToArray","annotation","length","obj","trim","substring","key","Object","objectSpread","push","TextArea","Input","SettingArea","Select","Option","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFields","err","values","setSettingConfig","hasErrors","fieldsError","keys","some","field","state","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","hasError","react_default","a","createElement","className","es_form","layout","onSubmit","Item","label","rules","required","message","input","placeholder","rows","initialValue","es_button","htmlType","disabled","Component","Form","create","CheckboxGroup","Checkbox","Group","plainOptions","value","AnnotationConfigTable","onChange","_index","_checkedData","updateAnnotationConfig","indeterminate","_this2","columns","title","dataIndex","render","text","record","options","bind","table","dataSource","pagination","onClick","HighlightCode","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","style","tokens","getLineProps","getTokenProps","line","token","App","_formateConfigParam","projectType","setState","formattedEntity","formattedXml","formattedDao","formattedServie","formattedController","formattedEnumServie","_this$state","ghost","icon","href","target","src_components_SettingArea","src_components_AnnotationConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87fb5497.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import * as _ from \"lodash\";\r\nimport * as beautify from \"js-beautify\";\r\nimport * as XmlBeautify from \"xml-beautify\";\r\nimport * as moment from 'moment'; \r\n\r\n//ignore entity colunm\r\nexport const ignoreColumnName = [\r\n  \"CREATE_TIME\",\r\n  \"CREATE_USER\",\r\n  \"LAST_MODIFIED\",\r\n  \"LAST_MODIFY_USER\",\r\n  \"TS\",\r\n  \"DR\"\r\n];\r\n\r\n\r\n\r\n\r\n//Generate COntroller\r\nexport const genController = _state => {\r\n\r\n   const { tableSchema, packageName, projectName, tableName } = _state;\r\n   let result = \"\"; \r\n\r\n\r\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \r\n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\r\n   const timestamp = moment().format('YYYY/MM/DD  HH:mm:ss');\r\n\r\n\r\n\r\n\r\n\r\n   result += `\r\n \r\n       package ${_.toLower(packageName)}.${_.toLower(projectName)}.controller;\r\n\r\n      import java.util.ArrayList;\r\n      import java.util.Date;\r\n      import java.util.HashMap;\r\n      import java.util.List;\r\n      import java.util.Map;\r\n\r\n      import javax.servlet.http.HttpServletRequest;\r\n      import javax.servlet.http.HttpServletResponse;\r\n\r\n      import org.apache.commons.lang3.StringUtils;\r\n      import org.slf4j.Logger;\r\n      import org.slf4j.LoggerFactory;\r\n      import org.springframework.beans.factory.annotation.Autowired;\r\n      import org.springframework.data.domain.Page;\r\n      import org.springframework.data.domain.PageRequest;\r\n      import org.springframework.stereotype.Controller;\r\n      import org.springframework.web.bind.annotation.RequestBody;\r\n      import org.springframework.web.bind.annotation.RequestMapping;\r\n      import org.springframework.web.bind.annotation.RequestMethod;\r\n      import org.springframework.web.bind.annotation.RequestParam;\r\n      import org.springframework.web.bind.annotation.ResponseBody;\r\n      import org.springframework.web.multipart.MultipartFile;\r\n\r\n      import com.yonyou.iuap.CSRFToken;\r\n      import ${_.toLower(packageName)}.${_.toLower(projectName)}.entity.${UpperProjectName}; \r\n      import ${_.toLower(packageName)}.${_.toLower(projectName)}.service.${UpperProjectName}Service;\r\n      import com.yonyou.iuap.base.web.BaseController;\r\n      import com.yonyou.iuap.baseservice.statistics.service.StatCommonService;\r\n      import com.yonyou.iuap.common.utils.ExcelExportImportor;\r\n      import com.yonyou.iuap.context.InvocationInfoProxy;\r\n      import com.yonyou.iuap.mvc.constants.RequestStatusEnum;\r\n      import com.yonyou.iuap.mvc.type.SearchParams;\r\n      import com.yonyou.iuap.i18n.MessageSourceUtil;\r\n      import com.yonyou.iuap.i18n.MethodUtils;\r\n\r\n      import cn.hutool.core.date.DateUtil;\r\n      import jline.internal.Log;\r\n\r\n      /**\r\n       * 說明：${UpperProjectName} 基礎Controller——提供數據增、刪、改、查、導入導出等rest接口\r\n       * \r\n       * @date ${timestamp}\r\n       */\r\n      @Controller\r\n      @RequestMapping(value = \"/${_.toLower(projectName)}\")\r\n      public class ${UpperProjectName}Controller extends BaseController {\r\n        private Logger logger = LoggerFactory.getLogger(${UpperProjectName}Controller.class);\r\n        //多語常量\r\n        private static final String KEY1 = \"ja.all.con1.0001\";\r\n          private static final String MSG1 = \"查詢數據異常！\";\r\n          private static final String KEY2 = \"ja.all.con1.0002\";\r\n          private static final String MSG2 = \"新增數據異常！\";\r\n          private static final String KEY3 = \"ja.all.con1.0003\";\r\n          private static final String MSG3 = \"修改數據異常！\";\r\n          private static final String KEY4 = \"ja.all.con1.0004\";\r\n          private static final String MSG4 = \"刪除數據異常！\";\r\n          private static final String KEY5 = \"ja.all.con1.0005\";\r\n          private static final String MSG5 = \"Excel模板下載失敗！\";\r\n          private static final String KEY6 = \"ja.all.con1.0006\";\r\n          private static final String MSG6 = \"Excel模板下載成功！\";\r\n          private static final String KEY7 = \"ja.all.con1.0007\";\r\n          private static final String MSG7 = \"導入文件格式異常！\";\r\n          private static final String KEY8 = \"ja.all.con1.0008\";\r\n          private static final String MSG8 = \"導入數據異常！\";\r\n          private static final String KEY9 = \"ja.all.con1.0009\";\r\n          private static final String MSG9 = \"Excel導入失敗！\";\r\n          private static final String KEY10 = \"ja.all.con1.0010\";\r\n          private static final String MSG10 = \"Excel導入成功！\";\r\n          private static final String NAME = \"name\";\r\n          private static final String KEY = \"ja.all.con.00001\";\r\n          private static final String MESSAGE = \"名稱不能為空！\";\r\n          \r\n        \r\n        private ${UpperProjectName}Service ${_.camelCase(projectName)}Service;\r\n\r\n        @Autowired\r\n        public void set${UpperProjectName}Service(${UpperProjectName}Service ${_.camelCase(projectName)}Service) {\r\n          this.${_.camelCase(projectName)}Service = ${_.camelCase(projectName)}Service;\r\n        }\r\n        \r\n        @Autowired\r\n        private StatCommonService statCommonService;\r\n        \r\n        private static final String MODELCODE = ${UpperProjectName}.class.getSimpleName();\r\n        private static final String DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\r\n        \r\n        /**\r\n         * 批量新增\r\n         * @param listData\r\n         * @return\r\n         */\r\n        @CSRFToken\r\n        @RequestMapping(value = \"/saveMultiple\", method = RequestMethod.POST)\r\n        @ResponseBody\r\n        public Object saveMultiple(@RequestBody List<${UpperProjectName}> listData) {\r\n          try {\r\n            /*\r\n            for (${UpperProjectName} model : listData) { \r\n                    // 國際化 當前語種 \r\n                    String localeSerial= InvocationInfoProxy.getParameter(\"locale_serial\");\r\n                    String loacleName = MethodUtils.getDataBySerial(model, NAME,localeSerial);\r\n                    if (StringUtils.isBlank(loacleName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n                    // 國際化 驗證默認語種 \r\n                    String defaultSerial= InvocationInfoProxy.getParameter(\"default_serial\");\r\n                    String defaultName = MethodUtils.getDataBySerial(model, NAME,defaultSerial);\r\n                    if (StringUtils.isBlank(defaultName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n                    // 國際化 驗證簡體中文 \r\n                    String simpleChineseName = MethodUtils.getDataBySerial(model, NAME,\"\");\r\n                    if (StringUtils.isBlank(simpleChineseName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n            }\r\n            */\r\n           \r\n            this.${_.camelCase(projectName)}Service.saveMultiple(listData);\r\n            return this.buildSuccess();\r\n          } catch (Exception exp) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY2, MSG2), exp);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY2, MSG2), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n          \r\n        }\r\n        /**\r\n         * 批量修改\r\n         * @param listData\r\n         * @return\r\n         */\r\n        @CSRFToken\r\n        @RequestMapping(value = \"/updateMultiple\", method = RequestMethod.POST)\r\n        @ResponseBody\r\n        public Object updateMultiple(@RequestBody List<${UpperProjectName}> listData) {\r\n          try {\r\n            /*\r\n            for (${UpperProjectName} model : listData) {\r\n                    // 國際化 當前語種\r\n                    String localeSerial= InvocationInfoProxy.getParameter(\"locale_serial\");\r\n                    String loacleName = MethodUtils.getDataBySerial(model, NAME,localeSerial);\r\n                    if (StringUtils.isBlank(loacleName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n                    // 國際化 驗證默認語種\r\n                    String defaultSerial= InvocationInfoProxy.getParameter(\"default_serial\");\r\n                    String defaultName = MethodUtils.getDataBySerial(model, NAME,defaultSerial);\r\n                    if (StringUtils.isBlank(defaultName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n                    // 國際化 驗證簡體中文\r\n                    String simpleChineseName = MethodUtils.getDataBySerial(model, NAME,\"\");\r\n                    if (StringUtils.isBlank(simpleChineseName)) {\r\n                      return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY, MESSAGE), RequestStatusEnum.FAIL_FIELD);\r\n                    }\r\n            }\r\n            */\r\n            this.${_.camelCase(projectName)}Service.updateMultiple(listData);\r\n            return this.buildSuccess();\r\n          } catch (Exception exp) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY3, MSG3), exp);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY3, MSG3), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n          \r\n        }\r\n          \r\n        /**\r\n         * 刪除\r\n         * @param listData\r\n         * @param request\r\n         * @param response\r\n         * @return\r\n         * @throws Exception\r\n         */\r\n        @CSRFToken\r\n        @RequestMapping(value = \"/deleteBatch\", method = RequestMethod.POST)\r\n        @ResponseBody\r\n        public Object deleteBatch(@RequestBody List<${UpperProjectName}> listData, HttpServletRequest request,\r\n            HttpServletResponse response){\r\n          try {\r\n            this.${_.camelCase(projectName)}Service.deleteBatch(listData);\r\n            return super.buildSuccess();\r\n          } catch (Exception exp) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY4, MSG4), exp);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY4, MSG4), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n          \r\n        }\r\n        /**\r\n         * 下載模板\r\n         * @param request\r\n         * @param response\r\n         * @return\r\n         */\r\n        @RequestMapping(value = \"/excelTemplateDownload\", method = { RequestMethod.GET })\r\n        @ResponseBody\r\n        public Object excelTemplateDownload(HttpServletRequest request, HttpServletResponse response) {\r\n          String name = \"${UpperProjectName}\";\r\n          try {\r\n            ExcelExportImportor.downloadExcelTemplate(response, getImportHeadInfo(), name, name);\r\n          } catch (Exception e) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY5, MSG5), e);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY5, MSG5), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n          return super.buildSuccess(MessageSourceUtil.getMessage(KEY6, MSG6));\r\n        }\r\n        \r\n        private static Map<String, String> getImportHeadInfo() {\r\n          Map<String, String> importMap = new HashMap<>();\r\n      `\r\n\r\n\r\n        tableSchema.map((item,i) => {\r\n            const columnName = _.get(item,\"columnName\");\r\n            const index = (i < 10) ? '0'+i : i;\r\n            result+=`importMap.put(\"${columnName}\", MessageSourceUtil.getMessage(\"ja.all.entity1.000${index}\", \"XXXXX\"));`;\r\n        })\r\n\r\n        \r\n          \r\n         result += `\r\n          return importMap;\r\n        }\r\n        /**\r\n         * 導入excel\r\n         * @param request\r\n         * @param file\r\n         * @return\r\n         */\r\n        @RequestMapping(value = \"/toImportExcel\", method = RequestMethod.POST)\r\n        @ResponseBody\r\n        public Object importExcel(HttpServletRequest request,@RequestParam(value = \"file\", required = false) MultipartFile file) {\r\n          try {\r\n            List<${UpperProjectName}> list = new ArrayList<${UpperProjectName}>();\r\n            String multName = file.getOriginalFilename().toString();\r\n            String multTypeName = multName.substring(multName.lastIndexOf(\".\") + 1, multName.length());\r\n            if (!\"xlsx\".equals(multTypeName)&& !\"xls\".equals(multTypeName)) {\r\n              Log.error(MessageSourceUtil.getMessage(KEY7, MSG7));\r\n              return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY7, MSG7), RequestStatusEnum.FAIL_FIELD);\r\n            }\r\n            list = ExcelExportImportor.loadExcel(file.getInputStream(), getImportHeadInfo(),${UpperProjectName}.class);\r\n            if (list == null || list.size() == 0) {\r\n              Log.error(MessageSourceUtil.getMessage(KEY8, MSG8));\r\n              return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY7, MSG7), RequestStatusEnum.FAIL_FIELD);\r\n            }\r\n            ${_.camelCase(projectName)}Service.saveBatch(list);\r\n          } catch (Exception e) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY9, MSG9), e);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY5, MSG5), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n          return super.buildSuccess(MessageSourceUtil.getMessage(KEY10, MSG10));\r\n        }\r\n        \r\n        /**\r\n         * 多過濾 多排序\r\n         * @param pageRequest\r\n         * @param searchMap\r\n         * @return\r\n         */\r\n        @CSRFToken(verify = false)\r\n        @RequestMapping(value = \"/list\", method = RequestMethod.POST)\r\n        @ResponseBody\r\n        public Object list(PageRequest pageRequest, @RequestBody Map<String, Object> searchMap) {\r\n          try {\r\n            SearchParams searchParams = new SearchParams();\r\n            searchParams.setSearchMap(searchMap);\r\n              if (pageRequest.getPageSize() == 1) {\r\n              Integer allCount = Integer.MAX_VALUE-1;\r\n              pageRequest = new PageRequest(pageRequest.getPageNumber(), allCount, pageRequest.getSort());\r\n            }\r\n              Page<Map> page = this.statCommonService.selectFieldsByPage(pageRequest, searchParams, MODELCODE);\r\n              // ${UpperProjectName}EnumService.fillDynamicList( page.getContent());\r\n              return this.buildSuccess(page);\r\n          } catch (Exception exp) {\r\n            logger.error(MessageSourceUtil.getMessage(KEY1, MSG1), exp);\r\n            return this.buildError(\"msg\", MessageSourceUtil.getMessage(KEY1, MSG1), RequestStatusEnum.FAIL_FIELD);\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n         \r\n      `;\r\n\r\n\r\n\r\n\r\n    const formattedController = beautify.js_beautify(result);\r\n\r\n    return formattedController;\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n//Generate Dao\r\nexport const genDao = _state => {\r\n   const { tableSchema, packageName, projectName, tableName } = _state;\r\n   let result = \"\";\r\n   const className = _.upperFirst(_.camelCase(tableName));\r\n\r\n\r\n   result+= `\r\n      package ${_.toLower(packageName)}.${_.toLower(projectName)}.dao;\r\n      import ${_.toLower(packageName)}.${_.toLower(projectName)}.entity.${_.upperFirst(_.camelCase(projectName))};\r\n      import com.yonyou.iuap.baseservice.persistence.mybatis.mapper.GenericExMapper;\r\n      import com.yonyou.iuap.mybatis.anotation.MyBatisRepository;\r\n      @MyBatisRepository\r\n      public interface ${_.upperFirst(_.camelCase(projectName))}Mapper extends GenericExMapper<${_.upperFirst(_.camelCase(projectName))}> {\r\n  \r\n      }\r\n\r\n   `;\r\n\r\n\r\n    const formattedDao = beautify.js_beautify(result);\r\n\r\n    return formattedDao;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//Generate EnumService\r\nexport const genEnumService = _state => {\r\n   const { tableSchema, packageName, projectName, tableName } = _state;\r\n   let result = \"\";\r\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \r\n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\r\n\r\n\r\n   result += `\r\n\r\n   package ${_.toLower(packageName)}.${_.toLower(projectName)}.service;\r\n\r\n  import com.yonyou.iuap.${_.toLower(projectName)}.entity.${_.upperFirst(_.camelCase(projectName))};\r\n  import java.util.ArrayList;\r\n  import java.util.HashMap;\r\n  import java.util.List;\r\n  import java.util.Map;\r\n  import org.springframework.stereotype.Service;\r\n  import com.yonyou.iuap.baseservice.persistence.support.QueryFeatureExtension;\r\n  import com.yonyou.iuap.mvc.type.SearchParams;\r\n\r\n  @Service\r\n  public class ${_.upperFirst(_.camelCase(projectName))}EnumService implements QueryFeatureExtension<${_.upperFirst(_.camelCase(projectName))}> {\r\n    private static Map<String, String> sexMap = new HashMap<String, String>(); \r\n    private static Map<String, String> monthMap = new HashMap<String, String>(); \r\n    static {\r\n      sexMap.put(\"0\", \"女\");\r\n      sexMap.put(\"1\", \"男\");  \r\n      monthMap.put(\"1\", \"一月\");\r\n      monthMap.put(\"2\", \"二月\");\r\n      monthMap.put(\"3\", \"三月\");\r\n      monthMap.put(\"4\", \"四月\");\r\n      monthMap.put(\"5\", \"五月\");\r\n      monthMap.put(\"6\", \"六月\");\r\n      monthMap.put(\"7\", \"七月\");\r\n      monthMap.put(\"8\", \"八月\");\r\n      monthMap.put(\"9\", \"九月\");\r\n      monthMap.put(\"10\", \"十月\");\r\n      monthMap.put(\"11\", \"十一月\");\r\n      monthMap.put(\"12\", \"十二月\"); \r\n    }\r\n\r\n    public static List<Map> fillDynamicList(List<Map> list) {\r\n      for (Map<String, Object> item : list) {\r\n        /*\r\n        if(item.get(\"sex\") != null){\r\n          item.put(\"sexEnumValue\",sexMap.get( String.valueOf(item.get(\"sex\") )  ));\r\n        } \r\n        */\r\n       \r\n        /*\r\n        if(item.get(\"month\") != null){\r\n          item.put(\"monthEnumValue\",monthMap.get( String.valueOf(item.get(\"month\") )  ));\r\n        }\r\n        */ \r\n      }\r\n      return list;\r\n    }\r\n    \r\n    @Override\r\n    public List<${_.upperFirst(_.camelCase(projectName))}> afterListQuery(List<${_.upperFirst(_.camelCase(projectName))}> list) {\r\n      List<${_.upperFirst(_.camelCase(projectName))}> resultList = new ArrayList<${_.upperFirst(_.camelCase(projectName))}>();\r\n      for (${_.upperFirst(_.camelCase(projectName))} entity : list) {\r\n        /*\r\n        if (entity.getSex() != null) {\r\n          String value = sexMap.get(entity.getSex().toString());\r\n          entity.setSexEnumValue(value);\r\n        }\r\n        */\r\n       \r\n \r\n\r\n        /*\r\n        if (entity.getMonth() != null) {\r\n          String value = monthMap.get(entity.getMonth().toString());\r\n          entity.setMonthEnumValue(value);\r\n        }\r\n        */\r\n        resultList.add(entity);\r\n      }\r\n\r\n      return resultList;\r\n    }\r\n\r\n    @Override\r\n    public SearchParams prepareQueryParam(SearchParams searchParams, Class modelClass) {\r\n      return searchParams;\r\n    }  \r\n  }\r\n\r\n\r\n   `;\r\n\r\n\r\n   const formattedEnumServie = beautify.js_beautify(result);\r\n\r\n   return formattedEnumServie;\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//Generate Service\r\nexport const genService = _state => {\r\n   const { tableSchema, packageName, projectName, tableName } = _state;\r\n   let result = \"\";\r\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \r\n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\r\n\r\n\r\n   result+= `  \r\n   package ${_.toLower(packageName)}.${_.toLower(projectName)}.service;\r\n\r\n\r\nimport static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.BPM;\r\nimport static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.LOGICAL_DEL;\r\nimport static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.MULTI_TENANT;\r\nimport static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.REFERENCE;\r\nimport static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.REMOTE_REFERENCE;\r\n\r\nimport java.util.Date;\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.yonyou.iuap.baseservice.intg.service.GenericIntegrateService;\r\nimport com.yonyou.iuap.baseservice.intg.support.ServiceFeature;\r\nimport com.yonyou.uap.busilog.annotation.LogConfig;\r\n\r\nimport cn.hutool.core.date.DateUtil;\r\n\r\n\r\nimport ${_.toLower(packageName)}.${_.toLower(projectName)}.dao.${UpperProjectName}Mapper;\r\nimport ${_.toLower(packageName)}.${_.toLower(projectName)}.entity.${UpperProjectName};\r\n\r\n/**\r\n * ${UpperProjectName} CRUD 核心服務,提供邏輯刪除/樂觀鎖\r\n */\r\n\r\n\r\n\r\n@Service\r\npublic class ${UpperProjectName}Service extends GenericIntegrateService<${UpperProjectName}> {\r\n\r\n  private ${UpperProjectName}Mapper ${_.camelCase(projectName)}Mapper;\r\n\r\n  @Autowired\r\n  public void set${UpperProjectName}Mapper(${UpperProjectName}Mapper ${_.camelCase(projectName)}Mapper) {\r\n    this.${_.camelCase(projectName)}Mapper = ${_.camelCase(projectName)}Mapper;\r\n    super.setGenericMapper(${_.camelCase(projectName)}Mapper);\r\n  }\r\n\r\n  /**\r\n   * @CAU 可插拔設計\r\n   * @return 向父類 GenericIntegrateService 提供可插拔的特性聲明\r\n   */\r\n  @Override\r\n  protected ServiceFeature[] getFeats() {\r\n    return new ServiceFeature[] { REFERENCE, BPM, MULTI_TENANT, LOGICAL_DEL,REMOTE_REFERENCE };\r\n  }\r\n  \r\n  private static final String DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\r\n  \r\n  @Override\r\n  @LogConfig(busiCode = \"${_.camelCase(projectName)}_insertSelective\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}保存\", templateId = \"${_.camelCase(projectName)}_insertSelective\")\r\n  public ${UpperProjectName} insertSelective(${UpperProjectName} entity) { \r\n    return super.insertSelective(entity);\r\n  }\r\n\r\n  @Override\r\n  @LogConfig(busiCode = \"${_.camelCase(projectName)}_updateSelective\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}修改\", templateId = \"${_.camelCase(projectName)}_updateSelective\")\r\n  public ${UpperProjectName} updateSelective(${UpperProjectName} entity) {\r\n    return super.updateSelective(entity);\r\n\r\n  }\r\n  @LogConfig(busiCode = \"${_.camelCase(projectName)}_saveMultiple\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}批量添加\", templateId = \"${_.camelCase(projectName)}_saveMultiple\")\r\n  public void saveMultiple(List<${UpperProjectName}> listData) { \r\n    super.saveBatch(listData);\r\n  }\r\n  \r\n  @LogConfig(busiCode = \"${_.camelCase(projectName)}_updateMultiple\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}批量修改\", templateId = \"${_.camelCase(projectName)}_updateMultiple\")\r\n  public void updateMultiple(List<${UpperProjectName}> listData) {\r\n    super.saveBatch(listData);\r\n  }\r\n\r\n  @Override\r\n  @LogConfig(busiCode = \"${_.camelCase(projectName)}_deleteBatch\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}刪除\", templateId = \"${_.camelCase(projectName)}_deleteBatch\")\r\n  public int deleteBatch(List<${UpperProjectName}> list) {\r\n    return super.deleteBatch(list);\r\n  }\r\n  \r\n}\r\n \r\n   `;\r\n\r\n\r\n    const formattedServie = beautify.js_beautify(result);\r\n\r\n    return formattedServie;\r\n\r\n}\r\n\r\n\r\n// Generate Entity\r\nexport const genEntity = _state => {\r\n  const { tableSchema, packageName, projectName, tableName } = _state;\r\n\r\n  const className = _.upperFirst(_.camelCase(tableName));\r\n  let result = \"\";\r\n\r\n  let absMode = 'AbsDrModel';\r\n  let codingEntity = ''; \r\n\r\n \r\n\r\n  tableSchema.map(item => { \r\n    if(_.startsWith(item.columnName, 'BPM')){\r\n      console.log('=== abs bpm mode ===')\r\n      absMode = 'AbsBpmModel';\r\n      return ;\r\n    }  \r\n  });\r\n\r\n\r\n  console.log('=== tableSchema ===')\r\n  console.log(tableSchema)\r\n\r\n  tableSchema.map(item => { \r\n    if(_.get(item, 'at_CodingEntity') == true){\r\n      codingEntity = `@CodingEntity(codingField = \"${_.camelCase(item.columnName)}\") `;\r\n      return ;\r\n    } \r\n  });\r\n\r\n \r\n\r\n\r\n\r\n\r\n  result += `\r\n      package ${_.toLower(packageName)}.${_.toLower(projectName)}.entity;\r\n\r\n      import java.io.Serializable;\r\n      import java.math.BigDecimal;\r\n\r\n      import javax.persistence.Column;\r\n      import javax.persistence.Id;\r\n      import javax.persistence.Table;\r\n      import javax.persistence.Transient;\r\n\r\n      import com.fasterxml.jackson.annotation.JsonIgnoreProperties; \r\n      import com.yonyou.iuap.baseservice.bpm.entity.AbsBpmModel;\r\n      import com.yonyou.iuap.baseservice.entity.annotation.CodingEntity;\r\n      import com.yonyou.iuap.baseservice.entity.annotation.CodingField;\r\n      import com.yonyou.iuap.baseservice.entity.annotation.Reference;\r\n      import com.yonyou.iuap.baseservice.multitenant.entity.MultiTenant;\r\n      import com.yonyou.iuap.baseservice.print.entity.Printable;\r\n      import com.yonyou.iuap.baseservice.statistics.support.StatFunctions;\r\n      import com.yonyou.iuap.baseservice.statistics.support.StatisticsField;\r\n      import com.yonyou.iuap.baseservice.support.condition.Condition;\r\n      import com.yonyou.iuap.baseservice.support.condition.Match;\r\n      import com.yonyou.iuap.baseservice.support.generator.GeneratedValue; \r\n\r\n\r\n      @JsonIgnoreProperties(ignoreUnknown = true)\r\n      @Table(name = \"${tableName}\") \r\n      ${codingEntity}\r\n      public class ${_.upperFirst(_.camelCase(projectName))} extends ${absMode} implements Serializable, MultiTenant{\r\n\r\n\r\n    `;\r\n\r\n  tableSchema.map(item => {\r\n    if (!ignoreColumnName.includes(item.columnName)) {\r\n      result += getEntityCell(item);\r\n    }\r\n  });\r\n\r\n\r\n  result += `\r\n    \r\n        // 建立者,使用参照\r\n        @Column(name = \"create_user\")\r\n        @Condition\r\n        @Reference(code = \"wbUser\", srcProperties = { \"refname\" }, desProperties = { \"createUserName\" })\r\n        private String createUser;\r\n\r\n        public String getCreateUser() {\r\n          return createUser;\r\n        }\r\n\r\n        public void setCreateUser(String createUser) {\r\n          this.createUser = createUser;\r\n        }\r\n        \r\n        \r\n        // 建立者 Name\r\n        @Transient\r\n        private String createUserName;\r\n        \r\n        public String getCreateUserName() {\r\n          return createUserName;\r\n        }\r\n\r\n        public void setCreateUserName(String createUserName) {\r\n          this.createUserName = createUserName;\r\n        }\r\n        \r\n        \r\n\r\n        // 修改者,使用参照\r\n        @Column(name = \"last_modify_user\")\r\n        @Condition\r\n        @Reference(code = \"wbUser\", srcProperties = { \"refname\" }, desProperties = { \"lastModifyUserName\" })\r\n        private String lastModifyUser;\r\n        \r\n        public String getLastModifyUser() {\r\n          return lastModifyUser;\r\n        }\r\n\r\n        public void setLastModifyUser(String lastModifyUser) {\r\n          this.lastModifyUser = lastModifyUser;\r\n        }\r\n        \r\n        \r\n        \r\n\r\n        // 修改者 Name\r\n        @Transient\r\n        private String lastModifyUserName;\r\n        \r\n        public String getLastModifyUserName() {\r\n          return lastModifyUserName;\r\n        }\r\n\r\n        public void setLastModifyUserName(String lastModifyUserName) {\r\n          this.lastModifyUserName = lastModifyUserName;\r\n        }\r\n\r\n\r\n  `;\r\n\r\n  result += \"} \";\r\n\r\n  const formattedEntity = beautify.js_beautify(result);\r\n\r\n\r\n   \r\n  return formattedEntity;\r\n};\r\n\r\n// Generate Entity Cell\r\nexport const getEntityCell = _item => {\r\n  let cell = \"\";\r\n\r\n  cell += _item.at_Id ? \"@Id \\n \" : \"\";\r\n  cell += _item.at_GeneratedValue ? \"@GeneratedValue \\n \" : \"\";\r\n  cell += _item.at_Condition ? \"@Condition(match = Match.EQ) \\n\" : \"\";\r\n\r\n\r\n  const colName = _item.columnName;\r\n  const colNameCamel = _.camelCase(colName);\r\n  const colNameUpperCamel = _.upperFirst(_.camelCase(colName));\r\n  const type = _item.type;\r\n\r\n  if (_item.at_Id || _item.columnName == \"ID\") {\r\n\r\n    cell += ` \r\n          @Id\r\n          @GeneratedValue\r\n          @Condition\r\n          @StatisticsField(functions = { StatFunctions.count })\r\n          protected String id; \r\n\r\n          @Override\r\n          public String getId() {\r\n          return id;\r\n          }\r\n\r\n          @Override\r\n          public void setId(Serializable id) {\r\n          this.id = id.toString();\r\n          super.id = id;\r\n          }\r\n\r\n          public void setId(String id) {\r\n          this.id = id;\r\n          }\r\n\r\n    `;\r\n  } else if (_item.columnName == \"TENANT_ID\") {\r\n    cell += `\r\n      \r\n        // TENANT ID\r\n        @Column(name = \"TENANT_ID\")\r\n        @Condition(match = Match.EQ)\r\n        private String tenantid;\r\n\r\n        public String getTenantid() {\r\n          return this.tenantid;\r\n        }\r\n\r\n        public void setTenantid(String tenantid) {\r\n          this.tenantid = tenantid;\r\n        }\r\n\r\n      `;\r\n  } else if (_item.columnName == \"BPM_STATE\") {\r\n    cell += `\r\n      \r\n      @Condition(match = Match.EQ)\r\n      @Column(name = \"bpm_state\")\r\n      private Integer bpmState;\r\n\r\n      public Integer getBpmState() {\r\n        return bpmState;\r\n      }\r\n\r\n      public void setBpmState(Integer bpmState) {\r\n        this.bpmState = bpmState;\r\n      }\r\n\r\n\r\n      @Override\r\n      public String getBpmBillCode() {\r\n        return getCode();\r\n      }\r\n\r\n      `;\r\n  } else {\r\n    cell += `@Column(name = \"${colName}\") \\n`\r\n    cell += _item.at_CodingEntity ? ` @CodingField(code = \"XXXXX\") ` : \"\";\r\n    cell += _item.at_Reference ? ` @Reference(code = \"XXXXX\", srcProperties = { \"XXXXX\" }, desProperties = { \"XXXXX\" }) ` : \"\";\r\n    cell+=`\r\n      private ${type} ${colNameCamel};  \r\n\r\n      public void set${colNameUpperCamel}(${type} ${colNameCamel}) {\r\n        this.${colNameCamel} = ${colNameCamel};\r\n      }\r\n\r\n      public ${type} get${colNameUpperCamel}() {\r\n        return this.${colNameCamel};\r\n      }\r\n\r\n    `;\r\n  }\r\n\r\n  return cell;\r\n};\r\n\r\nexport const formatTableSchemaToArray = _tableSchema => {\r\n  let preprocessData = _.split(_tableSchema, \"[\");\r\n  const patt = new RegExp(\"]\");\r\n  preprocessData = _.filter(preprocessData, item => patt.test(item));\r\n  preprocessData = _.map(preprocessData, item => _.split(item, \"]\")[0]);\r\n\r\n  preprocessData = _.filter(preprocessData, o => {\r\n    return o !== \"\" && o !== \"\\n\";\r\n  });\r\n\r\n  return preprocessData;\r\n};\r\n\r\nexport const genXML = _state => {\r\n  const { tableSchema, packageName, projectName, tableName } = _state;\r\n\r\n  const lowerProjectName = _.toLower(_.camelCase(projectName));\r\n  const upperCamelProjectname = _.upperFirst(_.camelCase(projectName));\r\n  const upperCamelTableName = _.upperFirst(_.camelCase(tableName)); \r\n\r\n  let map = new Map();\r\n\r\n  map.set(\"String\", \"VARCHAR\");\r\n  map.set(\"Double\", \"DECIMAL\");\r\n  map.set(\"Integer\", \"INTEGER\");\r\n\r\n  let xml = \"\"; \r\n\r\n  xml += `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n        <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\r\n        <mapper namespace=\"${packageName}.${lowerProjectName}.dao.${_.upperFirst(_.camelCase(projectName))}Mapper\">\r\n\r\n        <resultMap id=\"BaseResultMap\" type=\"${packageName}.${lowerProjectName}.entity.${_.upperFirst(_.camelCase(projectName))}\">\r\n\r\n\r\n   `;\r\n\r\n  tableSchema.map(item => {\r\n     if (item.columnName == \"TENANT_ID\") {\r\n      xml += `<result column=\"TENANT_ID\" jdbcType=\"VARCHAR\" property=\"tenantid\" />`;\r\n    } else {\r\n      xml += ` <result column=\"${item.columnName}\" jdbcType=\"${map.get(item.type)}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\r\n    }\r\n  });\r\n\r\n  xml += `\r\n   </resultMap>\r\n  \r\n\r\n  `;\r\n\r\n  xml += `\r\n\r\n    <!--  \r\n    <select id=\"selectAllByPage\" resultMap=\"BaseResultMap\">\r\n    SELECT t.* FROM ${tableName} t WHERE 1 =1 and t.dr=0\r\n      <if test=\"condition != null\">\r\n\r\n    `;\r\n\r\n  tableSchema.map(item => {\r\n    if (item.columnName == \"TENANT_ID\") {\r\n      xml += `   <if test=\"condition.searchMap.tenantid!=null and condition.searchMap.tenantid!='' \">\r\n        and t.TENANT_ID = #{condition.searchMap.tenantid}\r\n      </if> `;\r\n    } else {\r\n      xml += `\r\n      <if test=\"condition.searchMap.${_.camelCase(\r\n        item.columnName\r\n      )}!=null and condition.searchMap.${_.camelCase(item.columnName)}!='' \">\r\n        and t.${item.columnName} = #{condition.searchMap.${_.camelCase(\r\n        item.columnName\r\n      )}}\r\n      </if>\r\n    `;\r\n    }\r\n  });\r\n\r\n  xml += `\r\n      </if>\r\n        order by ts desc\r\n        <if test=\"page != null\">\r\n          <if test=\"page.sort!=null\">\r\n            <foreach collection=\"page.sort\" item=\"item\" separator=\" \">\r\n              ,\\$\\{item.property} \\$\\{item.direction}\r\n            </foreach>\r\n          </if>\r\n        </if>\r\n      </select>\r\n      -->\r\n    </mapper>\r\n  `;\r\n\r\n  const formattedXml = new XmlBeautify().beautify(xml, {\r\n    indent: \"  \", //indent pattern like white spaces\r\n    useSelfClosingElement: true //true:use self-closing element when empty element.\r\n  });\r\n\r\n  return formattedXml;\r\n};\r\n\r\n// Set Seeting Config For Setting Comp Data\r\nexport const formateConfigParam = _data => {\r\n  const packageName = _.toLower(_data.packageName);\r\n  const projectName = _.upperFirst(_.camelCase(_data.projectName));\r\n  let tableName = _data.tableName;\r\n\r\n\r\n  tableName = _.replace(tableName, '[', '');\r\n  tableName = _.replace(tableName, ']', '');\r\n\r\n\r\n  let tableSchema = _data.tableSchema;\r\n\r\n  let map = new Map();\r\n\r\n  map.set(\"VAR\", \"String\");//VARCHAR\r\n  map.set(\"DEC\", \"Double\");//DECIMAL\r\n  map.set(\"INT\", \"Integer\");//INT\r\n  map.set(\"NVA\", \"String\");//NVARCHAR\r\n  map.set(\"CHA\", \"String\");//CHAR\r\n \r\n\r\n  const tableSchemaArray = formatTableSchemaToArray(tableSchema);\r\n\r\n  tableSchema = [];\r\n  const annotation = {\r\n    at_Id: false,\r\n    at_Condition: false,\r\n    at_GeneratedValue: false,\r\n    at_CodingEntity:false,\r\n    at_Reference:false\r\n  };\r\n\r\n  for (let i = 0; i < tableSchemaArray.length; i += 2) {\r\n    let obj = {};\r\n    obj.columnName = tableSchemaArray[i];\r\n    obj.type = map.get(_.replace(tableSchemaArray[i + 1], 'TYPE_', '').trim().substring(0, 3)) ? map.get(_.replace(tableSchemaArray[i + 1], 'TYPE_', '').trim().substring(0, 3)) : 'String';\r\n    obj.key = tableSchemaArray[i];\r\n\r\n    obj = {\r\n      ...obj,\r\n      ...annotation\r\n    };\r\n\r\n    tableSchema.push(obj);\r\n  }\r\n\r\n  return { packageName, projectName, tableName, tableSchema };\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Form, Input, Button, Radio, Select  } from \"antd\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst { TextArea } = Input;\r\nconst Option = Select.Option;\r\n\r\nclass SettingArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.props.form.validateFields();\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {    \r\n        values.tableSchema = _.toUpper(values.tableSchema)\r\n        this.props.setSettingConfig(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  hasErrors = fieldsError => {\r\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\r\n    return hasError;\r\n  };\r\n\r\n \r\n\r\n  render() {\r\n    const {\r\n      getFieldDecorator,\r\n      getFieldsError,\r\n      getFieldError,\r\n      isFieldTouched\r\n    } = this.props.form;\r\n\r\n    const { hasError } = this.state;\r\n \r\n\r\n    return (\r\n      <div className=\"setting-area\">\r\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\r\n          {/* # Table Name */}\r\n     \r\n            <Form.Item  label=\"# Table Name\">\r\n              {getFieldDecorator(\"tableName\", {\r\n                rules: [\r\n                  { required: true, message: \"Please input your Table Name!\" }\r\n                ]\r\n              })(<Input placeholder=\"table name\" />)}\r\n            </Form.Item>\r\n         \r\n\r\n          {/* # Table Schema */}\r\n          <Form.Item label=\"# Table Schema\">\r\n            {getFieldDecorator(\"tableSchema\", {\r\n            //    initialValue:`\r\n            //   [ID] [varchar](64) NOT NULL,\r\n            //   [NAME] [varchar](64) NULL,\r\n            //   [IS_SON] [decimal](1, 0) NULL,\r\n            //   [PARENTID] [varchar](64) NULL,\r\n            //   [CREATE_TIME] [varchar](64) NULL,\r\n            //   [CREATE_USER] [varchar](64) NULL,\r\n            //   [LAST_MODIFIED] [varchar](64) NULL,\r\n            //   [LAST_MODIFY_USER] [varchar](64) NULL,\r\n            //   [TS] [varchar](64) NULL,\r\n            //   [DR] [decimal](11, 0) NULL,\r\n            //   [BPM_STATE] [decimal](11, 0) NULL,\r\n            //   [TENANT_ID] [varchar](64) NULL,\r\n            //   [CODE] [varchar](255) NULL\r\n            // `,\r\n              rules: [\r\n                { required: true, message: \"Please input your Table Schema!\" }\r\n              ]\r\n            })(<TextArea rows={10} />)}\r\n          </Form.Item>\r\n\r\n          {/* # Package Name */}\r\n          <Form.Item label=\"# Package Name\">\r\n            {getFieldDecorator(\"packageName\", {\r\n              initialValue: 'com.walsin.ytmes.mta',\r\n              rules: [\r\n                { required: true, message: \"Please input your Package Name!\" }\r\n              ]\r\n            })(<Input placeholder=\"package name\" />)}\r\n          </Form.Item>\r\n\r\n          {/* # Project Name */}\r\n          <Form.Item label=\"# Project Name\">\r\n            {getFieldDecorator(\"projectName\", {\r\n              rules: [\r\n                { required: true, message: \"Please input your Project Name!\" }\r\n              ]\r\n            })(<Input placeholder=\"project name\" />)}\r\n          </Form.Item>\r\n\r\n\r\n          {/* # Project Type */}\r\n          {/*\r\n\r\n            <Form.Item label=\"# Project Type\">\r\n            {getFieldDecorator(\"projectType\", {\r\n              initialValue:`A3`,\r\n              rules: [\r\n                { required: true, message: \"Please input your Project Type!\" }\r\n              ]\r\n            })(<Select  >\r\n                <Option value=\"A1\" disabled>A1 單表查詢</Option>\r\n                <Option value=\"A2\">A2 單表行編輯</Option>\r\n                <Option value=\"A3\">A3 單表彈窗</Option>\r\n                <Option value=\"B1\" disabled>B1 左樹右表</Option>\r\n                <Option value=\"B2\" disabled>B2 ㄧ主ㄧ子</Option>\r\n                <Option value=\"B3\" disabled>B3 ㄧ主多子</Option> \r\n              </Select>\r\n            )}\r\n          </Form.Item>\r\n\r\n \r\n          */}\r\n\r\n\r\n          {/* Submit Button  */}\r\n          <Form.Item>\r\n            <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                disabled={this.hasErrors(getFieldsError())}\r\n            >\r\n                Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form.create()(SettingArea);\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Table, Divider, Tag } from \"antd\";\r\nimport { Checkbox } from \"antd\";\r\nimport { Button } from 'antd';\r\n\r\nimport \"./index.scss\";\r\n\r\nconst CheckboxGroup = Checkbox.Group;\r\n\r\n// const plainOptions = ['@Id', '@Condition', '@3333'];\r\n\r\nconst plainOptions = [\r\n  { label: \"@Id\", value: \"at_Id\" },\r\n  { label: \"@GeneratedValue\", value: \"at_GeneratedValue\" },\r\n  { label: \"@Condition\", value: \"at_Condition\" },\r\n  { label: \"@CodingEntity\", value: \"at_CodingEntity\" },\r\n  { label: \"@Reference\", value: \"at_Reference\" },\r\n];\r\n\r\nclass AnnotationConfigTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      tableSchema: [],\r\n\r\n      indeterminate: true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  onChange = (_index, _checkedData) => { \r\n    const { tableSchema } = this.props;\r\n\r\n \r\n    const annotation = {\r\n      at_Id: false,\r\n      at_Condition: false,\r\n      at_GeneratedValue:false,\r\n      at_CodingEntity:false,\r\n      at_Reference:false\r\n    };\r\n\r\n    _checkedData.map(item => {\r\n      annotation[item] = true;\r\n    });\r\n\r\n    tableSchema[_index] = {\r\n      ...tableSchema[_index],\r\n      ...annotation\r\n    };\r\n\r\n \r\n\r\n    // this.setState({ tableSchema });\r\n\r\n  \r\n  };\r\n\r\n\r\n  updateAnnotationConfig = () => {\r\n     const { tableSchema } = this.props;\r\n    this.props.updateAnnotationConfig(tableSchema)\r\n  }\r\n\r\n\r\n\r\n\r\n  render() { \r\n    const {  tableSchema } = this.props;\r\n\r\n    const columns = [\r\n      {\r\n        title: \"Column Name\",\r\n        dataIndex: \"columnName\",\r\n        key: \"columnName\"\r\n      },\r\n      {\r\n        title: \"Type\",\r\n        dataIndex: \"type\",\r\n        key: \"type\"\r\n      },\r\n      ,\r\n      {\r\n        title: \"Annotation\",\r\n        key: \"Annotation\",\r\n        render: (text, record, index) => (\r\n          <CheckboxGroup\r\n            options={plainOptions}\r\n            onChange={this.onChange.bind(this, index)}\r\n          />\r\n        )\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div className=\"annotation-table\">\r\n        <h1 className=\"text-gradient\">@ Annotation</h1>\r\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\r\n        <Button type=\"primary\" onClick={this.updateAnnotationConfig}>Generate Entity & XML</Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnnotationConfigTable;\r\n","import React, { Component } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport theme from 'prism-react-renderer/themes/nightOwl'\r\n\r\nimport \"./index.less\";\r\n\r\nclass HighlightCode extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    const { codeStr, lang } = this.props;\r\n    return (\r\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\r\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n          <pre className={className} style={style}>\r\n            {tokens.map((line, i) => (\r\n              <div {...getLineProps({ line, key: i })}>\r\n                {line.map((token, key) => (\r\n                  <span {...getTokenProps({ token, key })} />\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </pre>\r\n        )}\r\n      </Highlight>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighlightCode;\r\n","import React, { Component } from \"react\";\r\n\r\nimport * as _ from \"lodash\";\r\nimport * as beautify from \"js-beautify\";\r\nimport * as XmlBeautify from \"xml-beautify\";\r\nimport { Button } from 'antd';\r\n\r\nimport { genEntity, formateConfigParam, genXML, genDao, genService, genEnumService, genController } from \"./util/generator.js\";\r\nimport SettingArea from \"./components/SettingArea/\";\r\nimport AnnotationConfigTable from \"./components/AnnotationConfigTable/\";\r\nimport HighlightCode from \"./components/HighlightCode/\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      packageName: \"\",\r\n      projectName: \"\",\r\n      projectType:'',\r\n      tableName: \"\",\r\n      tableSchema: [],\r\n      formattedEntity: \"\",\r\n      formattedDao: \"\",\r\n      formattedServie: \"\",\r\n      formattedController: \"\",\r\n      formattedEnumServie:\"\",\r\n      formattedXml: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  // Set Seeting Config For Setting Comp Data\r\n  setSettingConfig = _data => {\r\n    const {\r\n      packageName,\r\n      projectName,\r\n      tableName,\r\n      tableSchema\r\n    } = formateConfigParam(_data);\r\n\r\n    const projectType = _data.projectType;\r\n    this.setState({ packageName, projectName, tableName, tableSchema, projectType });\r\n  };\r\n\r\n  // Update Annotation Config For Config Table Comp\r\n  updateAnnotationConfig = _tableSchema => {\r\n    this.setState({ tableSchema: _tableSchema }, () => {\r\n      const formattedEntity = genEntity(this.state);\r\n      const formattedXml = genXML(this.state);\r\n      const formattedDao = genDao(this.state);\r\n      const formattedServie = genService(this.state);\r\n      //const formattedEnumServie = genEnumService(this.state);\r\n      const formattedController = genController(this.state);\r\n\r\n      this.setState({ formattedEntity, formattedXml, formattedDao,formattedServie, formattedController });\r\n    });\r\n  };\r\n\r\n  render() {\r\n\r\n    const {\r\n      packageName,\r\n      projectName,\r\n      tableName,\r\n      tableSchema,\r\n      formattedEntity,\r\n      formattedDao,\r\n      formattedServie,\r\n      formattedXml,\r\n      formattedController,\r\n      formattedEnumServie\r\n    } = this.state;\r\n\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      \r\n        {/* Github Button */}\r\n        <Button ghost icon=\"github\" className=\"githubBtn\">\r\n          <a href=\"https://github.com/openopen114/gen-entity-web\" target=\"_blank\"> Github</a>\r\n        </Button>\r\n\r\n        {/* Title */}\r\n        <h1 className=\"app-title\">ENTITY & XML GENERATOR</h1>\r\n\r\n        {/* Setting Area*/}\r\n        <SettingArea setSettingConfig={this.setSettingConfig} />\r\n\r\n        {/* Annotation Config Table*/}\r\n        <AnnotationConfigTable\r\n          tableSchema={tableSchema}\r\n          updateAnnotationConfig={this.updateAnnotationConfig}\r\n        />\r\n\r\n        {/* Entity Result */}\r\n        <h1 className=\"result-title\">Generate Entity Result</h1>\r\n        <HighlightCode codeStr={formattedEntity} lang=\"java\" />\r\n\r\n\r\n\r\n        {/* Dao Result */}\r\n        <h1 className=\"result-title\">Generate Dao Result</h1>\r\n        <HighlightCode codeStr={formattedDao} lang=\"java\" />\r\n\r\n\r\n        {/* Service Result */} \r\n        <h1 className=\"result-title\">Generate Service Result</h1>\r\n        <HighlightCode codeStr={formattedServie} lang=\"java\" />\r\n\r\n\r\n        {/* Enum Service Result */} \r\n        {/*\r\n          <h1 className=\"result-title\">Generate Enum Service Result</h1>\r\n          <HighlightCode codeStr={formattedEnumServie} lang=\"java\" />\r\n        */}\r\n\r\n\r\n\r\n        {/* EController Result */}\r\n        <h1 className=\"result-title\">Generate Controller Result</h1>\r\n        <HighlightCode codeStr={formattedController} lang=\"java\" />\r\n\r\n        {/* XML Result */}\r\n        <h1 className=\"result-title\">Generate XML Result</h1>\r\n        <HighlightCode codeStr={formattedXml} lang=\"xml\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}