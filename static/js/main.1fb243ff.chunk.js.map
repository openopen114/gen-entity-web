{"version":3,"sources":["components/HighlightCode/index.less","util/generator.js","components/SettingArea/index.jsx","components/AnnotationConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ignoreColumnName","genController","_state","tableSchema","packageName","projectName","tableName","result","UpperProjectName","_","concat","beautify","genDao","genEnumService","genService","genEntity","absMode","codingEntity","map","item","columnName","console","log","includes","getEntityCell","_item","cell","at_Id","at_GeneratedValue","at_Condition","colName","colNameCamel","colNameUpperCamel","type","at_CodingEntity","at_Reference","genXML","lowerProjectName","Map","set","xml","get","XmlBeautify","indent","useSelfClosingElement","formateConfigParam","_data","tableSchemaArray","_tableSchema","preprocessData","patt","RegExp","test","o","formatTableSchemaToArray","annotation","i","length","obj","substring","key","Object","objectSpread","push","TextArea","Input","SettingArea","Select","Option","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFields","err","values","setSettingConfig","hasErrors","fieldsError","keys","some","field","state","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","hasError","react_default","a","createElement","className","es_form","layout","onSubmit","Item","label","rules","required","message","input","placeholder","rows","initialValue","es_button","htmlType","disabled","Component","Form","create","CheckboxGroup","Checkbox","Group","plainOptions","value","AnnotationConfigTable","onChange","_index","_checkedData","updateAnnotationConfig","indeterminate","_this2","columns","title","dataIndex","render","text","record","index","options","bind","table","dataSource","pagination","onClick","HighlightCode","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","style","tokens","getLineProps","getTokenProps","line","token","App","_formateConfigParam","projectType","setState","formattedEntity","formattedXml","formattedDao","formattedServie","formattedEnumServie","formattedController","_this$state","ghost","icon","href","target","src_components_SettingArea","src_components_AnnotationConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fb243ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import * as _ from \"lodash\";\nimport * as beautify from \"js-beautify\";\nimport * as XmlBeautify from \"xml-beautify\";\n\n//ignore entity colunm\nexport const ignoreColumnName = [\n  \"CREATE_TIME\",\n  \"CREATE_USER\",\n  \"LAST_MODIFIED\",\n  \"LAST_MODIFY_USER\",\n  \"TS\",\n  \"DR\"\n];\n\n\n\n\n//Generate COntroller\nexport const genController = _state => {\n\n   const { tableSchema, packageName, projectName, tableName } = _state;\n   let result = \"\"; \n\n\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\n\n\n   result += `\n         package com.yonyou.iuap.${_.toLower(projectName)}.controller;\n\n        import java.util.List;\n        import java.util.Map;\n\n        import javax.servlet.http.HttpServletRequest;\n        import javax.servlet.http.HttpServletResponse;\n\n        import org.slf4j.Logger;\n        import org.slf4j.LoggerFactory;\n        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.data.domain.Page;\n        import org.springframework.data.domain.PageRequest;\n        import org.springframework.stereotype.Controller;\n        import org.springframework.web.bind.annotation.RequestBody;\n        import org.springframework.web.bind.annotation.RequestMapping;\n        import org.springframework.web.bind.annotation.RequestMethod;\n        import org.springframework.web.bind.annotation.ResponseBody;\n\n        import com.yonyou.iuap.CSRFToken;\n        import com.yonyou.iuap.${_.toLower(projectName)}.entity.${UpperProjectName};\n        import com.yonyou.iuap.${_.toLower(projectName)}.service.${UpperProjectName}EnumService;\n        import com.yonyou.iuap.${_.toLower(projectName)}.service.${UpperProjectName}Service;\n        import com.yonyou.iuap.base.web.BaseController;\n        import com.yonyou.iuap.baseservice.statistics.service.StatCommonService;\n        import com.yonyou.iuap.mvc.constants.RequestStatusEnum;\n        import com.yonyou.iuap.mvc.type.SearchParams;\n\n        /**\n         * 说明：${UpperProjectName} 基础Controller——提供数据增、删、改、查、导入导出等rest接口\n         * \n         * @date YYYY-MM-DD HH:mm:ss\n         */\n        @Controller\n        @RequestMapping(value = \"/${_.toLower(projectName)}\")\n        public class ${UpperProjectName}Controller extends BaseController {\n          private Logger logger = LoggerFactory.getLogger(${UpperProjectName}Controller.class);\n\n          private ${UpperProjectName}Service ${_.camelCase(projectName)}Service;\n\n          @Autowired\n          public void set${UpperProjectName}Service(${UpperProjectName}Service ${_.camelCase(projectName)}Service) {\n            this.${_.camelCase(projectName)}Service = ${_.camelCase(projectName)}Service;\n          }\n          \n          @Autowired\n          private StatCommonService statCommonService;\n          \n          private static final String MODELCODE = \"${UpperProjectName}\";\n          /**\n           * 添加\n           * @param entity\n           * @return\n           */\n          @CSRFToken\n          @RequestMapping(value = \"/insertSelective\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object insertSelective(@RequestBody ${UpperProjectName} entity) {\n            try {\n               ${_.camelCase(projectName)}Service.insertSelective(entity);\n              return this.buildSuccess(entity);\n            } catch (Exception exp) {\n              logger.error(\"exp\", exp);\n              return this.buildError(\"msg\", \"Error insert database\", RequestStatusEnum.FAIL_FIELD);\n            }\n          }\n          /**\n           * 修改\n           * @param entity\n           * @return\n           */\n          @CSRFToken\n          @RequestMapping(value = \"/updateSelective\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object updateSelective(@RequestBody ${UpperProjectName} entity) {\n            try {\n               ${_.camelCase(projectName)}Service.updateSelective(entity);\n              return this.buildSuccess(entity);\n            } catch (Exception exp) {\n              logger.error(\"exp\", exp);\n              return this.buildError(\"msg\", \"Error update database\", RequestStatusEnum.FAIL_FIELD);\n            }\n          } \n\n\n\n\n          /**\n           * 批量添加\n           * @param listData\n           * @return\n           */\n          @CSRFToken\n          @RequestMapping(value = \"/saveMultiple\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object saveMultiple(@RequestBody List<${UpperProjectName}> listData) {\n            try {\n              this.${_.camelCase(projectName)}Service.saveMultiple(listData);\n              return this.buildSuccess();\n            } catch (Exception exp) {\n              logger.error(\"exp\", exp);\n              return this.buildError(\"msg\", \"Error save database\", RequestStatusEnum.FAIL_FIELD);\n            }\n            \n          }\n          /**\n           * 批量修改\n           * @param listData\n           * @return\n           */\n          @CSRFToken\n          @RequestMapping(value = \"/updateMultiple\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object updateMultiple(@RequestBody List<${UpperProjectName}> listData) {\n            try {\n              this.${_.camelCase(projectName)}Service.updateMultiple(listData);\n              return this.buildSuccess();\n            } catch (Exception exp) {\n              logger.error(\"exp\", exp);\n              return this.buildError(\"msg\", \"Error update database\", RequestStatusEnum.FAIL_FIELD);\n            }\n            \n          }\n\n\n   \n          \n          /**\n           * 删除\n           * @param listData\n           * @param request\n           * @param response\n           * @return\n           * @throws Exception\n           */\n          @CSRFToken\n          @RequestMapping(value = \"/deleteBatch\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object deleteBatch(@RequestBody List<${UpperProjectName}> listData, HttpServletRequest request,\n              HttpServletResponse response) throws Exception {\n            this. ${_.camelCase(projectName)}Service.deleteBatch(listData);\n            return super.buildSuccess();\n          }\n          \n          /**\n           * 多过滤 多排序\n           * @param pageRequest\n           * @param searchMap\n           * @return\n           */\n          @CSRFToken(verify = false)\n          @RequestMapping(value = \"/list\", method = RequestMethod.POST)\n          @ResponseBody\n          public Object list(PageRequest pageRequest, @RequestBody Map<String, Object> searchMap) {\n            try {\n              SearchParams searchParams = new SearchParams();\n              searchParams.setSearchMap(searchMap);\n                if (pageRequest.getPageSize() == 1) {\n                Integer allCount = Integer.MAX_VALUE-1;\n                pageRequest = new PageRequest(pageRequest.getPageNumber(), allCount, pageRequest.getSort());\n              }\n                Page<Map> page = this.statCommonService.selectFieldsByPage(pageRequest, searchParams, MODELCODE);\n                ${UpperProjectName}EnumService.fillDynamicList( page.getContent());\n                return this.buildSuccess(page);\n            } catch (Exception exp) {\n              logger.error(\"exp\", exp);\n              return this.buildError(\"msg\", \"Error querying database\", RequestStatusEnum.FAIL_FIELD);\n            }\n          }\n        }\n`;\n\n\n\n\n    const formattedController = beautify.js_beautify(result);\n\n    return formattedController;\n\n\n\n\n\n  \n}\n\n\n\n\n//Generate Dao\nexport const genDao = _state => {\n   const { tableSchema, packageName, projectName, tableName } = _state;\n   let result = \"\";\n   const className = _.upperFirst(_.camelCase(tableName));\n\n\n   result+= `\n      package com.yonyou.iuap.${_.toLower(projectName)}.dao;\n      import com.yonyou.iuap.${_.toLower(projectName)}.entity.${_.upperFirst(_.camelCase(projectName))};\n      import com.yonyou.iuap.baseservice.persistence.mybatis.mapper.GenericExMapper;\n      import com.yonyou.iuap.mybatis.anotation.MyBatisRepository;\n      @MyBatisRepository\n      public interface ${_.upperFirst(_.camelCase(projectName))}Mapper extends GenericExMapper<${_.upperFirst(_.camelCase(projectName))}> {\n  \n      }\n\n   `;\n\n\n    const formattedDao = beautify.js_beautify(result);\n\n    return formattedDao;\n\n}\n\n\n\n\n//Generate EnumService\nexport const genEnumService = _state => {\n   const { tableSchema, packageName, projectName, tableName } = _state;\n   let result = \"\";\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\n\n\n   result += `\n\n   package com.yonyou.iuap.${_.toLower(projectName)}.service;\n\n  import com.yonyou.iuap.${_.toLower(projectName)}.entity.${_.upperFirst(_.camelCase(projectName))};\n  import java.util.ArrayList;\n  import java.util.HashMap;\n  import java.util.List;\n  import java.util.Map;\n  import org.springframework.stereotype.Service;\n  import com.yonyou.iuap.baseservice.persistence.support.QueryFeatureExtension;\n  import com.yonyou.iuap.mvc.type.SearchParams;\n\n  @Service\n  public class ${_.upperFirst(_.camelCase(projectName))}EnumService implements QueryFeatureExtension<${_.upperFirst(_.camelCase(projectName))}> {\n    private static Map<String, String> sexMap = new HashMap<String, String>(); \n    private static Map<String, String> monthMap = new HashMap<String, String>(); \n    static {\n      sexMap.put(\"0\", \"女\");\n      sexMap.put(\"1\", \"男\");  \n      monthMap.put(\"1\", \"一月\");\n      monthMap.put(\"2\", \"二月\");\n      monthMap.put(\"3\", \"三月\");\n      monthMap.put(\"4\", \"四月\");\n      monthMap.put(\"5\", \"五月\");\n      monthMap.put(\"6\", \"六月\");\n      monthMap.put(\"7\", \"七月\");\n      monthMap.put(\"8\", \"八月\");\n      monthMap.put(\"9\", \"九月\");\n      monthMap.put(\"10\", \"十月\");\n      monthMap.put(\"11\", \"十一月\");\n      monthMap.put(\"12\", \"十二月\"); \n    }\n\n    public static List<Map> fillDynamicList(List<Map> list) {\n      for (Map<String, Object> item : list) {\n        /*\n        if(item.get(\"sex\") != null){\n          item.put(\"sexEnumValue\",sexMap.get( String.valueOf(item.get(\"sex\") )  ));\n        } \n        */\n       \n        /*\n        if(item.get(\"month\") != null){\n          item.put(\"monthEnumValue\",monthMap.get( String.valueOf(item.get(\"month\") )  ));\n        }\n        */ \n      }\n      return list;\n    }\n    \n    @Override\n    public List<${_.upperFirst(_.camelCase(projectName))}> afterListQuery(List<${_.upperFirst(_.camelCase(projectName))}> list) {\n      List<${_.upperFirst(_.camelCase(projectName))}> resultList = new ArrayList<${_.upperFirst(_.camelCase(projectName))}>();\n      for (${_.upperFirst(_.camelCase(projectName))} entity : list) {\n        /*\n        if (entity.getSex() != null) {\n          String value = sexMap.get(entity.getSex().toString());\n          entity.setSexEnumValue(value);\n        }\n        */\n       \n \n\n        /*\n        if (entity.getMonth() != null) {\n          String value = monthMap.get(entity.getMonth().toString());\n          entity.setMonthEnumValue(value);\n        }\n        */\n        resultList.add(entity);\n      }\n\n      return resultList;\n    }\n\n    @Override\n    public SearchParams prepareQueryParam(SearchParams searchParams, Class modelClass) {\n      return searchParams;\n    }  \n  }\n\n\n   `;\n\n\n   const formattedEnumServie = beautify.js_beautify(result);\n\n   return formattedEnumServie;\n\n\n\n}\n\n\n\n\n//Generate Service\nexport const genService = _state => {\n   const { tableSchema, packageName, projectName, tableName } = _state;\n   let result = \"\";\n   const UpperTableName = _.upperFirst(_.camelCase(tableName)); \n   const UpperProjectName = _.upperFirst(_.camelCase(projectName));\n\n\n   result+= `  \n      package com.yonyou.iuap.${_.toLower(projectName)}.service;\n\n      import static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.BPM;\n      import static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.LOGICAL_DEL;\n      import static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.MULTI_TENANT;\n      import static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.REFERENCE;\n      import static com.yonyou.iuap.baseservice.intg.support.ServiceFeature.REMOTE_REFERENCE;\n\n      import java.util.Date;\n      import java.util.List;\n\n      import org.springframework.beans.factory.annotation.Autowired;\n      import org.springframework.stereotype.Service;\n\n      import com.yonyou.iuap.${_.toLower(projectName)}.dao.${UpperProjectName}Mapper;\n      import com.yonyou.iuap.${_.toLower(projectName)}.entity.${UpperProjectName};\n      import com.yonyou.iuap.baseservice.intg.service.GenericIntegrateService;\n      import com.yonyou.iuap.baseservice.intg.support.ServiceFeature;\n      import com.yonyou.uap.busilog.annotation.LogConfig;\n\n      import cn.hutool.core.date.DateUtil;\n\n      @Service\n\n      /**\n       * ${UpperProjectName} CRUD 核心服务,提供逻辑删除/乐观锁\n       */\n      public class ${UpperProjectName}Service extends GenericIntegrateService<${UpperProjectName}> {\n\n        private ${UpperProjectName}Mapper ${_.camelCase(projectName)}Mapper;\n\n        @Autowired\n        public void set${UpperProjectName}Mapper(${UpperProjectName}Mapper ${_.camelCase(projectName)}Mapper) {\n          this.${_.camelCase(projectName)}Mapper = ${_.camelCase(projectName)}Mapper;\n          super.setGenericMapper(${_.camelCase(projectName)}Mapper);\n        }\n\n        /**\n         * @CAU 可插拔设计\n         * @return 向父类 GenericIntegrateService 提供可插拔的特性声明\n         */\n        @Override\n        protected ServiceFeature[] getFeats() {\n          return new ServiceFeature[] { REFERENCE, BPM, MULTI_TENANT, LOGICAL_DEL,REMOTE_REFERENCE };\n        }\n        \n        private static final String DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\n        \n        @Override\n        @LogConfig(busiCode = \"${_.camelCase(projectName)}_insertSelective\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}保存\", templateId = \"${_.camelCase(projectName)}_insertSelective\")\n        public ${UpperProjectName} insertSelective(${UpperProjectName} entity) { \n          return super.insertSelective(entity);\n        }\n\n        @Override\n        @LogConfig(busiCode = \"${_.camelCase(projectName)}_updateSelective\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}修改\", templateId = \"${_.camelCase(projectName)}_updateSelective\")\n        public ${UpperProjectName} updateSelective(${UpperProjectName} entity) {\n          return super.updateSelective(entity);\n\n        }\n        @LogConfig(busiCode = \"${_.camelCase(projectName)}_saveMultiple\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}批量添加\", templateId = \"${_.camelCase(projectName)}_saveMultiple\")\n        public void saveMultiple(List<${UpperProjectName}> listData) { \n          super.saveBatch(listData);\n        }\n        \n        @LogConfig(busiCode = \"${_.camelCase(projectName)}_updateMultiple\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}批量修改\", templateId = \"${_.camelCase(projectName)}_updateMultiple\")\n        public void updateMultiple(List<${UpperProjectName}> listData) {\n          super.saveBatch(listData);\n        }\n\n        @Override\n        @LogConfig(busiCode = \"${_.camelCase(projectName)}_deleteBatch\", busiName = \"${_.camelCase(projectName)}\", operation = \"${_.camelCase(projectName)}删除\", templateId = \"${_.camelCase(projectName)}_deleteBatch\")\n        public int deleteBatch(List<${UpperProjectName}> list) {\n          return super.deleteBatch(list);\n        }\n        \n      }\n\n   `;\n\n\n    const formattedServie = beautify.js_beautify(result);\n\n    return formattedServie;\n\n}\n\n\n// Generate Entity\nexport const genEntity = _state => {\n  const { tableSchema, packageName, projectName, tableName } = _state;\n\n  const className = _.upperFirst(_.camelCase(tableName));\n  let result = \"\";\n\n  let absMode = 'AbsDrModel';\n  let codingEntity = ''; \n\n \n\n  tableSchema.map(item => { \n    if(_.startsWith(item.columnName, 'BPM')){\n      console.log('=== abs bpm mode ===')\n      absMode = 'AbsBpmModel';\n      return ;\n    }  \n  });\n\n\n  console.log('=== tableSchema ===')\n  console.log(tableSchema)\n\n  tableSchema.map(item => { \n    if(_.get(item, 'at_CodingEntity') == true){\n      codingEntity = `@CodingEntity(codingField = \"${_.camelCase(item.columnName)}\") `;\n      return ;\n    } \n  });\n\n \n\n\n\n\n  result += `\n      package com.yonyou.iuap.${_.toLower(projectName)}.entity;\n\n      import java.io.Serializable;\n      import java.math.BigDecimal;\n\n      import javax.persistence.Column;\n      import javax.persistence.Id;\n      import javax.persistence.Table;\n      import javax.persistence.Transient;\n\n      import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n      import com.yonyou.iuap.baseservice.entity.AbsDrModel;\n      import com.yonyou.iuap.baseservice.entity.annotation.Associative;\n      import com.yonyou.iuap.baseservice.entity.annotation.Reference;\n      import com.yonyou.iuap.baseservice.support.condition.Condition;\n      import com.yonyou.iuap.baseservice.support.generator.GeneratedValue;\n      import com.yonyou.iuap.baseservice.multitenant.entity.MultiTenant;\n      import com.yonyou.iuap.baseservice.support.condition.Match; \n      import com.yonyou.iuap.baseservice.entity.annotation.CodingEntity;\n      import com.yonyou.iuap.baseservice.entity.annotation.CodingField;\n      import com.yonyou.iuap.baseservice.bpm.entity.AbsBpmModel;\n      import com.yonyou.iuap.baseservice.statistics.support.StatFunctions;\n      import com.yonyou.iuap.baseservice.statistics.support.StatisticsField;\n\n      @JsonIgnoreProperties(ignoreUnknown = true)\n      @Table(name = \"${tableName}\") \n      ${codingEntity}\n      public class ${_.upperFirst(_.camelCase(projectName))} extends ${absMode} implements Serializable, MultiTenant{\n\n\n    `;\n\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      result += getEntityCell(item);\n    }\n  });\n\n  result += \"} \";\n\n  const formattedEntity = beautify.js_beautify(result);\n\n\n   \n  return formattedEntity;\n};\n\n// Generate Entity Cell\nexport const getEntityCell = _item => {\n  let cell = \"\";\n\n  cell += _item.at_Id ? \"@Id \\n \" : \"\";\n  cell += _item.at_GeneratedValue ? \"@GeneratedValue \\n \" : \"\";\n  cell += _item.at_Condition ? \"@Condition(match = Match.EQ) \\n\" : \"\";\n\n\n  const colName = _item.columnName;\n  const colNameCamel = _.camelCase(colName);\n  const colNameUpperCamel = _.upperFirst(_.camelCase(colName));\n  const type = _item.type;\n\n  if (_item.at_Id) {\n\n    cell += ` @StatisticsField(functions = { StatFunctions.count })\n          protected String ${colNameCamel};\n\n          @Override\n          public String getId() {\n            return ${colNameCamel};\n          }\n\n          @Override\n          public void set${colNameUpperCamel}(Serializable id) {\n            this.${colNameCamel} = id.toString();\n            super.id = id;\n          }\n\n          public void set${colNameUpperCamel}(String id) {\n            this.${colNameCamel} = id;\n          }\n\n    `;\n  } else if (_item.columnName == \"TENANT_ID\") {\n    cell += `\n      \n      @Condition\n      @Column(name = \"TENANT_ID\")\n      private String tenantid;\n\n      public String getTenantid() {\n        return this.tenantid;\n      }\n\n      public void setTenantid(String tenantid) {\n        this.tenantid = tenantid;\n      }\n\n      `;\n  } else if (_item.columnName == \"BPM_STATE\") {\n    cell += `\n      \n      @Condition(match = Match.EQ)\n      @Column(name = \"bpm_state\")\n      private Integer bpmState;\n\n      public Integer getBpmState() {\n        return bpmState;\n      }\n\n      public void setBpmState(Integer bpmState) {\n        this.bpmState = bpmState;\n      }\n\n\n      @Override\n      public String getBpmBillCode() {\n        return getCode();\n      }\n\n      `;\n  } else {\n    cell += `@Column(name = \"${colName}\") \\n`\n    cell += _item.at_CodingEntity ? ` @CodingField(code = \"XXXXX\") ` : \"\";\n    cell += _item.at_Reference ? ` @Reference(code = \"XXXXX\", srcProperties = { \"XXXXX\" }, desProperties = { \"XXXXX\" }) ` : \"\";\n    cell+=`\n      private ${type} ${colNameCamel};  \n\n      public void set${colNameUpperCamel}(${type} ${colNameCamel}) {\n        this.${colNameCamel} = ${colNameCamel};\n      }\n\n      public ${type} get${colNameUpperCamel}() {\n        return this.${colNameCamel};\n      }\n\n    `;\n  }\n\n  return cell;\n};\n\nexport const formatTableSchemaToArray = _tableSchema => {\n  let preprocessData = _.split(_tableSchema, \"[\");\n  const patt = new RegExp(\"]\");\n  preprocessData = _.filter(preprocessData, item => patt.test(item));\n  preprocessData = _.map(preprocessData, item => _.split(item, \"]\")[0]);\n\n  preprocessData = _.filter(preprocessData, o => {\n    return o !== \"\" && o !== \"\\n\";\n  });\n\n  return preprocessData;\n};\n\nexport const genXML = _state => {\n  const { tableSchema, packageName, projectName, tableName } = _state;\n\n  const lowerProjectName = _.toLower(_.camelCase(projectName));\n  const upperCamelProjectname = _.upperFirst(_.camelCase(projectName));\n  const upperCamelTableName = _.upperFirst(_.camelCase(tableName)); \n\n  let map = new Map();\n\n  map.set(\"String\", \"VARCHAR\");\n  map.set(\"Double\", \"DECIMAL\");\n  map.set(\"Integer\", \"INTEGER\");\n\n  let xml = \"\"; \n\n  xml += `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <mapper namespace=\"${packageName}.${lowerProjectName}.dao.${_.upperFirst(_.camelCase(projectName))}Mapper\">\n        <resultMap id=\"BaseResultMap\" type=\"${packageName}.${_.toLower(projectName)}.entity.${_.upperFirst(_.camelCase(projectName))}\">\n\n   `;\n\n  tableSchema.map(item => {\n    if (item.at_Id) {\n      xml += `<id column=\"${item.columnName}\" jdbcType=\"${map.get(\n        item.type\n      )}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\n    } else if (item.columnName == \"TENANT_ID\") {\n      xml += `<result column=\"TENANT_ID\" jdbcType=\"VARCHAR\" property=\"tenantid\" />`;\n    } else {\n      xml += ` <result column=\"${item.columnName}\" jdbcType=\"${map.get(\n        item.type\n      )}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\n    }\n  });\n\n  xml += `\n   </resultMap>\n  \n\n  `;\n\n  xml += `\n    <select id=\"selectAllByPage\" resultMap=\"BaseResultMap\">\n    SELECT t.* FROM ${tableName} t WHERE 1 =1 and t.dr=0\n      <if test=\"condition != null\">\n\n    `;\n\n  tableSchema.map(item => {\n    if (item.columnName == \"TENANT_ID\") {\n      xml += `   <if test=\"condition.searchMap.tenantid!=null and condition.searchMap.tenantid!='' \">\n        and t.TENANT_ID = #{condition.searchMap.tenantid}\n      </if> `;\n    } else {\n      xml += `\n      <if test=\"condition.searchMap.${_.camelCase(\n        item.columnName\n      )}!=null and condition.searchMap.${_.camelCase(item.columnName)}!='' \">\n        and t.${item.columnName} = #{condition.searchMap.${_.camelCase(\n        item.columnName\n      )}}\n      </if>\n    `;\n    }\n  });\n\n  xml += `\n      </if>\n        order by ts desc\n        <if test=\"page != null\">\n          <if test=\"page.sort!=null\">\n            <foreach collection=\"page.sort\" item=\"item\" separator=\" \">\n              ,\\$\\{item.property} \\$\\{item.direction}\n            </foreach>\n          </if>\n        </if>\n      </select>\n    </mapper>\n  `;\n\n  const formattedXml = new XmlBeautify().beautify(xml, {\n    indent: \"  \", //indent pattern like white spaces\n    useSelfClosingElement: true //true:use self-closing element when empty element.\n  });\n\n  return formattedXml;\n};\n\n// Set Seeting Config For Setting Comp Data\nexport const formateConfigParam = _data => {\n  const packageName = _.toLower(_data.packageName);\n  const projectName = _.upperFirst(_.camelCase(_data.projectName));\n  let tableName = _data.tableName;\n\n\n  tableName = _.replace(tableName, '[', '');\n  tableName = _.replace(tableName, ']', '');\n\n\n  let tableSchema = _data.tableSchema;\n\n  let map = new Map();\n\n  map.set(\"VAR\", \"String\");\n  map.set(\"DEC\", \"Double\");\n  map.set(\"INT\", \"Integer\");\n\n  const tableSchemaArray = formatTableSchemaToArray(tableSchema);\n\n  tableSchema = [];\n  const annotation = {\n    at_Id: false,\n    at_Condition: false,\n    at_GeneratedValue: false,\n    at_CodingEntity:false,\n    at_Reference:false\n  };\n\n  for (let i = 0; i < tableSchemaArray.length; i += 2) {\n    let obj = {};\n    obj.columnName = tableSchemaArray[i];\n    obj.type = map.get(_.toUpper(tableSchemaArray[i + 1]).substring(0, 3));\n    obj.key = tableSchemaArray[i];\n\n    obj = {\n      ...obj,\n      ...annotation\n    };\n\n    tableSchema.push(obj);\n  }\n\n  return { packageName, projectName, tableName, tableSchema };\n};\n","import React, { Component } from \"react\";\n\nimport { Form, Input, Button, Radio, Select  } from \"antd\";\nimport * as _ from \"lodash\";\n\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\nconst Option = Select.Option;\n\nclass SettingArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    // this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {  \n        this.props.setSettingConfig(values);\n      }\n    });\n  };\n\n  hasErrors = fieldsError => {\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\n    return hasError;\n  };\n\n \n\n  render() {\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n\n    const { hasError } = this.state;\n \n\n    return (\n      <div className=\"setting-area\">\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n          {/* # Table Name */}\n     \n            <Form.Item  label=\"# Table Name\">\n              {getFieldDecorator(\"tableName\", {\n                rules: [\n                  { required: true, message: \"Please input your Table Name!\" }\n                ]\n              })(<Input placeholder=\"table name\" />)}\n            </Form.Item>\n         \n\n          {/* # Table Schema */}\n          <Form.Item label=\"# Table Schema\">\n            {getFieldDecorator(\"tableSchema\", {\n            //    initialValue:`\n            //   [ID] [varchar](64) NOT NULL,\n            //   [NAME] [varchar](64) NULL,\n            //   [IS_SON] [decimal](1, 0) NULL,\n            //   [PARENTID] [varchar](64) NULL,\n            //   [CREATE_TIME] [varchar](64) NULL,\n            //   [CREATE_USER] [varchar](64) NULL,\n            //   [LAST_MODIFIED] [varchar](64) NULL,\n            //   [LAST_MODIFY_USER] [varchar](64) NULL,\n            //   [TS] [varchar](64) NULL,\n            //   [DR] [decimal](11, 0) NULL,\n            //   [BPM_STATE] [decimal](11, 0) NULL,\n            //   [TENANT_ID] [varchar](64) NULL,\n            //   [CODE] [varchar](255) NULL\n            // `,\n              rules: [\n                { required: true, message: \"Please input your Table Schema!\" }\n              ]\n            })(<TextArea rows={10} />)}\n          </Form.Item>\n\n          {/* # Package Name */}\n          <Form.Item label=\"# Package Name\">\n            {getFieldDecorator(\"packageName\", {\n              initialValue: 'com.yonyou.iuap',\n              rules: [\n                { required: true, message: \"Please input your Package Name!\" }\n              ]\n            })(<Input placeholder=\"package name\" />)}\n          </Form.Item>\n\n          {/* # Project Name */}\n          <Form.Item label=\"# Project Name\">\n            {getFieldDecorator(\"projectName\", {\n              rules: [\n                { required: true, message: \"Please input your Project Name!\" }\n              ]\n            })(<Input placeholder=\"project name\" />)}\n          </Form.Item>\n\n\n          {/* # Project Type */}\n          {/*\n\n            <Form.Item label=\"# Project Type\">\n            {getFieldDecorator(\"projectType\", {\n              initialValue:`A3`,\n              rules: [\n                { required: true, message: \"Please input your Project Type!\" }\n              ]\n            })(<Select  >\n                <Option value=\"A1\" disabled>A1 單表查詢</Option>\n                <Option value=\"A2\">A2 單表行編輯</Option>\n                <Option value=\"A3\">A3 單表彈窗</Option>\n                <Option value=\"B1\" disabled>B1 左樹右表</Option>\n                <Option value=\"B2\" disabled>B2 ㄧ主ㄧ子</Option>\n                <Option value=\"B3\" disabled>B3 ㄧ主多子</Option> \n              </Select>\n            )}\n          </Form.Item>\n\n \n          */}\n\n\n          {/* Submit Button  */}\n          <Form.Item>\n            <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={this.hasErrors(getFieldsError())}\n            >\n                Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(SettingArea);\n","import React, { Component } from \"react\";\n\nimport { Table, Divider, Tag } from \"antd\";\nimport { Checkbox } from \"antd\";\nimport { Button } from 'antd';\n\nimport \"./index.scss\";\n\nconst CheckboxGroup = Checkbox.Group;\n\n// const plainOptions = ['@Id', '@Condition', '@3333'];\n\nconst plainOptions = [\n  { label: \"@Id\", value: \"at_Id\" },\n  { label: \"@GeneratedValue\", value: \"at_GeneratedValue\" },\n  { label: \"@Condition\", value: \"at_Condition\" },\n  { label: \"@CodingEntity\", value: \"at_CodingEntity\" },\n  { label: \"@Reference\", value: \"at_Reference\" },\n];\n\nclass AnnotationConfigTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tableSchema: [],\n\n      indeterminate: true\n    };\n  }\n\n  componentDidMount() {}\n\n  onChange = (_index, _checkedData) => { \n    const { tableSchema } = this.props;\n\n \n    const annotation = {\n      at_Id: false,\n      at_Condition: false,\n      at_GeneratedValue:false,\n      at_CodingEntity:false,\n      at_Reference:false\n    };\n\n    _checkedData.map(item => {\n      annotation[item] = true;\n    });\n\n    tableSchema[_index] = {\n      ...tableSchema[_index],\n      ...annotation\n    };\n\n \n\n    // this.setState({ tableSchema });\n\n  \n  };\n\n\n  updateAnnotationConfig = () => {\n     const { tableSchema } = this.props;\n    this.props.updateAnnotationConfig(tableSchema)\n  }\n\n\n\n\n  render() { \n    const {  tableSchema } = this.props;\n\n    const columns = [\n      {\n        title: \"Column Name\",\n        dataIndex: \"columnName\",\n        key: \"columnName\"\n      },\n      {\n        title: \"Type\",\n        dataIndex: \"type\",\n        key: \"type\"\n      },\n      ,\n      {\n        title: \"Annotation\",\n        key: \"Annotation\",\n        render: (text, record, index) => (\n          <CheckboxGroup\n            options={plainOptions}\n            onChange={this.onChange.bind(this, index)}\n          />\n        )\n      }\n    ];\n\n    return (\n      <div className=\"annotation-table\">\n        <h1 className=\"text-gradient\">@ Annotation</h1>\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\n        <Button type=\"primary\" onClick={this.updateAnnotationConfig}>Generate Entity & XML</Button>\n      </div>\n    );\n  }\n}\n\nexport default AnnotationConfigTable;\n","import React, { Component } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from 'prism-react-renderer/themes/nightOwl'\n\nimport \"./index.less\";\n\nclass HighlightCode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { codeStr, lang } = this.props;\n    return (\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    );\n  }\n}\n\nexport default HighlightCode;\n","import React, { Component } from \"react\";\n\nimport * as _ from \"lodash\";\nimport * as beautify from \"js-beautify\";\nimport * as XmlBeautify from \"xml-beautify\";\nimport { Button } from 'antd';\n\nimport { genEntity, formateConfigParam, genXML, genDao, genService, genEnumService, genController } from \"./util/generator.js\";\nimport SettingArea from \"./components/SettingArea/\";\nimport AnnotationConfigTable from \"./components/AnnotationConfigTable/\";\nimport HighlightCode from \"./components/HighlightCode/\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      packageName: \"\",\n      projectName: \"\",\n      projectType:'',\n      tableName: \"\",\n      tableSchema: [],\n      formattedEntity: \"\",\n      formattedDao: \"\",\n      formattedServie: \"\",\n      formattedController: \"\",\n      formattedEnumServie:\"\",\n      formattedXml: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  // Set Seeting Config For Setting Comp Data\n  setSettingConfig = _data => {\n    const {\n      packageName,\n      projectName,\n      tableName,\n      tableSchema\n    } = formateConfigParam(_data);\n\n    const projectType = _data.projectType;\n    this.setState({ packageName, projectName, tableName, tableSchema, projectType });\n  };\n\n  // Update Annotation Config For Config Table Comp\n  updateAnnotationConfig = _tableSchema => {\n    this.setState({ tableSchema: _tableSchema }, () => {\n      const formattedEntity = genEntity(this.state);\n      const formattedXml = genXML(this.state);\n      const formattedDao = genDao(this.state);\n      const formattedServie = genService(this.state);\n      const formattedEnumServie = genEnumService(this.state);\n      const formattedController = genController(this.state);\n\n      this.setState({ formattedEntity, formattedXml, formattedDao,formattedServie, formattedEnumServie, formattedController });\n    });\n  };\n\n  render() {\n\n    const {\n      packageName,\n      projectName,\n      tableName,\n      tableSchema,\n      formattedEntity,\n      formattedDao,\n      formattedServie,\n      formattedXml,\n      formattedController,\n      formattedEnumServie\n    } = this.state;\n\n\n    return (\n      <div className=\"App\">\n      \n        {/* Github Button */}\n        <Button ghost icon=\"github\" className=\"githubBtn\">\n          <a href=\"https://github.com/openopen114/gen-entity-web\" target=\"_blank\"> Github</a>\n        </Button>\n\n        {/* Title */}\n        <h1 className=\"app-title\">ENTITY & XML GENERATOR</h1>\n\n        {/* Setting Area*/}\n        <SettingArea setSettingConfig={this.setSettingConfig} />\n\n        {/* Annotation Config Table*/}\n        <AnnotationConfigTable\n          tableSchema={tableSchema}\n          updateAnnotationConfig={this.updateAnnotationConfig}\n        />\n\n        {/* Entity Result */}\n        <h1 className=\"result-title\">Generate Entity Result</h1>\n        <HighlightCode codeStr={formattedEntity} lang=\"java\" />\n\n\n\n        {/* Dao Result */}\n        <h1 className=\"result-title\">Generate Dao Result</h1>\n        <HighlightCode codeStr={formattedDao} lang=\"java\" />\n\n\n        {/* Service Result */} \n        <h1 className=\"result-title\">Generate Service Result</h1>\n        <HighlightCode codeStr={formattedServie} lang=\"java\" />\n\n\n        {/* Enum Service Result */} \n        <h1 className=\"result-title\">Generate Enum Service Result</h1>\n        <HighlightCode codeStr={formattedEnumServie} lang=\"java\" />\n\n\n        {/* EController Result */}\n        <h1 className=\"result-title\">Generate Controller Result</h1>\n        <HighlightCode codeStr={formattedController} lang=\"java\" />\n\n        {/* XML Result */}\n        <h1 className=\"result-title\">Generate XML Result</h1>\n        <HighlightCode codeStr={formattedXml} lang=\"xml\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}