{"version":3,"sources":["components/HighlightCode/index.less","components/SettingArea/index.jsx","components/AnnotationConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextArea","Input","SettingArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","setSettingConfig","hasErrors","fieldsError","keys","some","field","state","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","hasError","react_default","a","createElement","className","es_form","layout","onSubmit","Item","label","rules","required","message","input","placeholder","rows","initialValue","es_button","type","htmlType","disabled","Component","Form","create","CheckboxGroup","Checkbox","Group","plainOptions","value","AnnotationConfigTable","onChange","_index","_checkedData","tableSchema","annotation","at_Id","at_Condition","at_GeneratedValue","map","item","objectSpread","updateAnnotationConfig","indeterminate","_this2","columns","title","dataIndex","key","render","text","record","index","options","bind","table","dataSource","pagination","onClick","HighlightCode","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","style","tokens","getLineProps","getTokenProps","line","i","token","App","ignoreColumnName","_data","packageName","_","projectName","tableName","Map","set","tableSchemaArray","formatTableSchemaToArray","length","obj","columnName","get","substring","push","setState","_tableSchema","genEntity","genXML","_this$state","result","concat","includes","getEntityCell","formattedEntity","beautify","_item","cell","colName","colNameCamel","colNameUpperCamel","preprocessData","patt","RegExp","test","o","_this$state2","lowerProjectName","upperCamelTableName","xml","formattedXml","XmlBeautify","indent","useSelfClosingElement","_this$state3","src_components_SettingArea","src_components_AnnotationConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4935a219.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import React, { Component } from \"react\";\n\nimport { Form, Input, Button, Radio } from \"antd\";\nimport * as _ from \"lodash\";\n\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\n\nclass SettingArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    // this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(\"Received values of form: \", values); \n        this.props.setSettingConfig(values);\n      }\n    });\n  };\n\n  hasErrors = fieldsError => {\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\n    return hasError;\n  };\n\n \n\n  render() {\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n\n    const { hasError } = this.state;\n \n\n    return (\n      <div className=\"setting-area\">\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n          {/* # Table Name */}\n     \n            <Form.Item  label=\"# Table Name\">\n              {getFieldDecorator(\"tableName\", {\n                rules: [\n                  { required: true, message: \"Please input your Table Name!\" }\n                ]\n              })(<Input placeholder=\"table name\" />)}\n            </Form.Item>\n         \n\n          {/* # Table Schema */}\n          <Form.Item label=\"# Table Schema\">\n            {getFieldDecorator(\"tableSchema\", {\n              rules: [\n                { required: true, message: \"Please input your Table Schema!\" }\n              ]\n            })(<TextArea rows={10} />)}\n          </Form.Item>\n\n          {/* # Package Name */}\n          <Form.Item label=\"# Package Name\">\n            {getFieldDecorator(\"packageName\", {\n              initialValue: 'com.yonyou.iuap',\n              rules: [\n                { required: true, message: \"Please input your Package Name!\" }\n              ]\n            })(<Input placeholder=\"package name\" />)}\n          </Form.Item>\n\n          {/* # Project Name */}\n          <Form.Item label=\"# Project Name\">\n            {getFieldDecorator(\"projectName\", {\n              rules: [\n                { required: true, message: \"Please input your Project Name!\" }\n              ]\n            })(<Input placeholder=\"project name\" />)}\n          </Form.Item>\n\n          {/* Submit Button  */}\n          <Form.Item>\n            <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={this.hasErrors(getFieldsError())}\n            >\n                Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(SettingArea);\n","import React, { Component } from \"react\";\n\nimport { Table, Divider, Tag } from \"antd\";\nimport { Checkbox } from \"antd\";\nimport { Button } from 'antd';\n\nimport \"./index.scss\";\n\nconst CheckboxGroup = Checkbox.Group;\n\n// const plainOptions = ['@Id', '@Condition', '@3333'];\n\nconst plainOptions = [\n  { label: \"@Id\", value: \"at_Id\" },\n  { label: \"@GeneratedValue\", value: \"at_GeneratedValue\" },\n  { label: \"@Condition\", value: \"at_Condition\" }\n];\n\nclass AnnotationConfigTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tableSchema: [],\n\n      indeterminate: true\n    };\n  }\n\n  componentDidMount() {}\n\n  onChange = (_index, _checkedData) => { \n    const { tableSchema } = this.props;\n\n \n    const annotation = {\n      at_Id: false,\n      at_Condition: false,\n      at_GeneratedValue:false\n    };\n\n    _checkedData.map(item => {\n      annotation[item] = true;\n    });\n\n    tableSchema[_index] = {\n      ...tableSchema[_index],\n      ...annotation\n    };\n\n \n\n    // this.setState({ tableSchema });\n\n  \n  };\n\n\n  updateAnnotationConfig = () => {\n     const { tableSchema } = this.props;\n    this.props.updateAnnotationConfig(tableSchema)\n  }\n\n\n\n\n  render() {\n    console.log(\"this.props\");\n    console.log(this.props);\n\n    const {  tableSchema } = this.props;\n\n    const columns = [\n      {\n        title: \"Column Name\",\n        dataIndex: \"columnName\",\n        key: \"columnName\"\n      },\n      {\n        title: \"Type\",\n        dataIndex: \"type\",\n        key: \"type\"\n      },\n      ,\n      {\n        title: \"Annotation\",\n        key: \"Annotation\",\n        render: (text, record, index) => (\n          <CheckboxGroup\n            options={plainOptions}\n            onChange={this.onChange.bind(this, index)}\n          />\n        )\n      }\n    ];\n\n    return (\n      <div className=\"annotation-table\">\n        <h1 className=\"text-gradient\">@ Annotation</h1>\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\n        <Button type=\"primary\" onClick={this.updateAnnotationConfig}>Generate Entity & XML</Button>\n      </div>\n    );\n  }\n}\n\nexport default AnnotationConfigTable;\n","import React, { Component } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from 'prism-react-renderer/themes/nightOwl'\n\nimport \"./index.less\";\n\nclass HighlightCode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { codeStr, lang } = this.props;\n    return (\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    );\n  }\n}\n\nexport default HighlightCode;\n","import React, { Component } from \"react\";\n\nimport * as _ from \"lodash\";\nimport * as beautify from \"js-beautify\";\nimport * as XmlBeautify from \"xml-beautify\";\n\nimport SettingArea from \"./components/SettingArea/\";\nimport AnnotationConfigTable from \"./components/AnnotationConfigTable/\";\nimport HighlightCode from \"./components/HighlightCode/\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  //ignore entity colunm\n  ignoreColumnName = [\n    \"CREATE_TIME\",\n    \"CREATE_USER\",\n    \"LAST_MODIFIED\",\n    \"LAST_MODIFY_USER\",\n    \"TS\",\n    \"DR\"\n  ];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      packageName: \"\",\n      projectName: \"\",\n      tableName: \"\",\n      tableSchema: [],\n      formattedEntity: \"\",\n      formattedXml: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  // Set Seeting Config For Setting Comp Data\n  setSettingConfig = _data => {\n    const packageName = _.toLower(_data.packageName);\n    const projectName = _.upperFirst(_.camelCase(_data.projectName));\n    const tableName = _data.tableName;\n    let tableSchema = _data.tableSchema;\n\n    let map = new Map();\n\n    map.set(\"VAR\", \"String\");\n    map.set(\"DEC\", \"Double\");\n    map.set(\"INT\", \"Integer\");\n\n    const tableSchemaArray = this.formatTableSchemaToArray(tableSchema);\n\n    tableSchema = [];\n    const annotation = {\n      at_Id: false,\n      at_Condition: false,\n      at_GeneratedValue: false\n    };\n\n    for (let i = 0; i < tableSchemaArray.length; i +=2) {\n      let obj = {};\n      obj.columnName = tableSchemaArray[i];\n      obj.type = map.get(_.toUpper(tableSchemaArray[i + 1]).substring(0, 3));\n      obj.key = tableSchemaArray[i];\n\n      obj = {\n        ...obj,\n        ...annotation\n      };\n\n      tableSchema.push(obj);\n    }\n\n    this.setState({ packageName, projectName, tableName, tableSchema });\n  };\n\n  // Update Annotation Config For Config Table Comp\n  updateAnnotationConfig = _tableSchema => {\n    this.setState({ tableSchema: _tableSchema }, () => {\n      this.genEntity();\n      this.genXML();\n    });\n  };\n\n  // Generate Entity\n  genEntity = () => {\n    const { tableSchema, packageName, projectName, tableName } = this.state;\n\n    const className = _.upperFirst(_.camelCase(tableName));\n    let result = \"\";\n\n    result += `\n      package com.yonyou.iuap.${_.toLower(projectName)}.entity;\n\n      import java.io.Serializable;\n      import java.math.BigDecimal;\n\n      import javax.persistence.Column;\n      import javax.persistence.Id;\n      import javax.persistence.Table;\n      import javax.persistence.Transient;\n\n      import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n      import com.yonyou.iuap.baseservice.entity.AbsDrModel;\n      import com.yonyou.iuap.baseservice.entity.annotation.Associative;\n      import com.yonyou.iuap.baseservice.entity.annotation.Reference;\n      import com.yonyou.iuap.baseservice.support.condition.Condition;\n      import com.yonyou.iuap.baseservice.support.generator.GeneratedValue;\n      import com.yonyou.iuap.baseservice.multitenant.entity.MultiTenant;\n\n      @JsonIgnoreProperties(ignoreUnknown = true)\n      @Table(name = \"${tableName}\") \n      public class ${className} extends AbsDrModel implements Serializable, MultiTenant{\n\n\n    `;\n\n    tableSchema.map(item => {\n      if (!this.ignoreColumnName.includes(item.columnName)) {\n        result += this.getEntityCell(item);\n      }\n    });\n\n    result += \"} \";\n\n    const formattedEntity = beautify.js_beautify(result);\n    this.setState({ formattedEntity });\n  };\n\n  // Generate Entity Cell\n  getEntityCell = _item => {\n    let cell = \"\";\n\n    cell += _item.at_Id ? \"@Id \\n \" : \"\";\n    cell += _item.at_GeneratedValue ? \"@GeneratedValue \\n \" : \"\";\n    cell += _item.at_Condition ? \"@Condition \\n\" : \"\";\n\n    const colName = _item.columnName;\n    const colNameCamel = _.camelCase(colName);\n    const colNameUpperCamel = _.upperFirst(_.camelCase(colName));\n    const type = _item.type;\n\n    if (_item.at_Id) {\n      cell += `protected String ${colNameCamel};\n\n          @Override\n          public String getId() {\n            return ${colNameCamel};\n          }\n\n          @Override\n          public void set${colNameUpperCamel}(Serializable id) {\n            this.${colNameCamel} = id.toString();\n            super.id = id;\n          }\n\n          public void set${colNameUpperCamel}(String id) {\n            this.${colNameCamel} = id;\n          }\n\n    `;\n    } else if (_item.columnName == \"TENANT_ID\") {\n      cell += `\n      \n      @Condition\n      @Column(name = \"TENANT_ID\")\n      private String tenantid;\n\n      public String getTenantid() {\n        return this.tenantid;\n      }\n\n      public void setTenantid(String tenantid) {\n        this.tenantid = tenantid;\n      }\n\n      `;\n    } else {\n      cell += `@Column(name = \"${colName}\")\n      private ${type} ${colNameCamel};  \n\n      public void set${colNameUpperCamel}(${type} ${colNameCamel}) {\n        this.${colNameCamel} = ${colNameCamel};\n      }\n\n      public ${type} get${colNameUpperCamel}() {\n        return this.${colNameCamel};\n      }\n\n    `;\n    }\n\n    return cell;\n  };\n\n  formatTableSchemaToArray = _tableSchema => {\n    let preprocessData = _.split(_tableSchema, '[');  \n    const patt = new RegExp(\"\\]\");\n    preprocessData = _.filter(preprocessData, item  => patt.test(item))\n    preprocessData = _.map(preprocessData, item => _.split(item, ']')[0]);\n\n \n    preprocessData = _.filter(preprocessData, o => {\n      return o !== \"\" && o !== \"\\n\";\n    });\n\n \n\n    return preprocessData;\n  };\n\n  genXML = () => {\n    const { tableSchema, packageName, projectName, tableName } = this.state;\n\n    const lowerProjectName = _.toLower(_.camelCase(projectName));\n    const upperCamelProjectname = _.upperFirst(_.camelCase(projectName));\n    const upperCamelTableName = _.upperFirst(_.camelCase(tableName));\n\n    let map = new Map();\n\n    map.set(\"String\", \"VARCHAR\");\n    map.set(\"Double\", \"DECIMAL\");\n    map.set(\"Integer\", \"INTEGER\");\n\n    let xml = \"\";\n\n    xml += `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <mapper namespace=\"${packageName}.${lowerProjectName}.dao.${upperCamelTableName}Mapper\">\n        <resultMap id=\"BaseResultMap\" type=\"${packageName}.${upperCamelTableName}.entity.MachineD18\">\n\n   `;\n\n    tableSchema.map(item => {\n      if (item.at_Id) {\n        xml += `<id column=\"${item.columnName}\" jdbcType=\"${map.get(\n          item.type\n        )}\" property=\"${_.toLower(_.camelCase(item.columnName))}\" /> \\n`;\n      } else {\n        xml += `<result column=\"${item.columnName}\" jdbcType=\"${map.get(\n          item.type\n        )}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\n      }\n    });\n\n    xml += `\n   </resultMap>\n  \n\n  `;\n\n    xml += `\n    <select id=\"selectAllByPage\" resultMap=\"BaseResultMap\">\n    SELECT t.* FROM ${tableName} t WHERE 1 =1 and t.dr=0\n      <if test=\"condition != null\">\n\n    `;\n\n    tableSchema.map(item => {\n      xml += `\n      <if test=\"condition.searchMap.${_.camelCase(\n        item.columnName\n      )}!=null and condition.searchMap.${_.camelCase(item.columnName)}!='' \">\n        and t.${item.columnName} = #{condition.searchMap.${_.camelCase(\n        item.columnName\n      )}}\n      </if>\n    `;\n    });\n\n    xml += `\n      </if>\n        order by ts desc\n        <if test=\"page != null\">\n          <if test=\"page.sort!=null\">\n            <foreach collection=\"page.sort\" item=\"item\" separator=\" \">\n              ,\\$\\{item.property} \\$\\{item.direction}\n            </foreach>\n          </if>\n        </if>\n      </select>\n    </mapper>\n  `;\n\n    const formattedXml = new XmlBeautify().beautify(xml, {\n      indent: \"  \", //indent pattern like white spaces\n      useSelfClosingElement: true //true:use self-closing element when empty element.\n    });\n\n    this.setState({ formattedXml });\n  };\n\n  render() {\n    const {\n      packageName,\n      projectName,\n      tableName,\n      tableSchema,\n      formattedEntity,\n      formattedXml\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <h1 className=\"app-title\">ENTITY & XML GENERATOR</h1>\n        <SettingArea setSettingConfig={this.setSettingConfig} />\n        <AnnotationConfigTable\n          tableSchema={tableSchema}\n          updateAnnotationConfig={this.updateAnnotationConfig}\n        />\n\n        <h1 className=\"result-title\">Generate Entity Result</h1>\n        <HighlightCode codeStr={formattedEntity} lang=\"java\" />\n\n        <h1 className=\"result-title\">Generate XML Result</h1>\n        <HighlightCode codeStr={formattedXml} lang=\"xml\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}