{"version":3,"sources":["components/HighlightCode/index.less","util/generator.js","components/SettingArea/index.jsx","components/AnnotationConfigTable/index.jsx","components/HighlightCode/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ignoreColumnName","genEntity","_state","tableSchema","projectName","packageName","tableName","className","_","result","concat","map","item","includes","columnName","getEntityCell","beautify","_item","cell","at_Id","at_GeneratedValue","at_Condition","colName","colNameCamel","colNameUpperCamel","type","genXML","lowerProjectName","upperCamelTableName","Map","set","xml","get","XmlBeautify","indent","useSelfClosingElement","formateConfigParam","_data","tableSchemaArray","_tableSchema","preprocessData","patt","RegExp","test","o","formatTableSchemaToArray","annotation","i","length","obj","substring","key","Object","objectSpread","push","TextArea","Input","SettingArea","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","form","validateFields","err","values","setSettingConfig","hasErrors","fieldsError","keys","some","field","state","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","hasError","react_default","a","createElement","es_form","layout","onSubmit","Item","label","rules","required","message","input","placeholder","rows","initialValue","es_button","htmlType","disabled","Component","Form","create","CheckboxGroup","Checkbox","Group","plainOptions","value","AnnotationConfigTable","onChange","_index","_checkedData","updateAnnotationConfig","indeterminate","_this2","columns","title","dataIndex","render","text","record","index","options","bind","table","dataSource","pagination","onClick","HighlightCode","_this$props","codeStr","lang","es","assign","defaultProps","theme","code","language","_ref","style","tokens","getLineProps","getTokenProps","line","token","App","_formateConfigParam","setState","formattedEntity","formattedXml","_this$state","ghost","icon","href","target","src_components_SettingArea","src_components_AnnotationConfigTable","src_components_HighlightCode","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qLAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iOCK3BC,EAAmB,CAC9B,cACA,cACA,gBACA,mBACA,KACA,MAIWC,EAAY,SAAAC,GAAU,IACzBC,EAAqDD,EAArDC,YAA0BC,GAA2BF,EAAxCG,YAAwCH,EAA3BE,aAAaE,EAAcJ,EAAdI,UAEzCC,EAAYC,aAAaA,YAAYF,IACvCG,EAAS,GAsCb,OApCAA,GAAM,mCAAAC,OACwBF,UAAUJ,GADlC,mzBAAAM,OAoBeJ,EApBf,4BAAAI,OAqBaH,EArBb,uEA0BNJ,EAAYQ,IAAI,SAAAC,GACTZ,EAAiBa,SAASD,EAAKE,cAClCL,GAAUM,EAAcH,MAI5BH,GAAU,KAEcO,cAAqBP,IAMlCM,EAAgB,SAAAE,GAC3B,IAAIC,EAAO,GAEXA,GAAQD,EAAME,MAAQ,UAAY,GAClCD,GAAQD,EAAMG,kBAAoB,sBAAwB,GAC1DF,GAAQD,EAAMI,aAAe,gBAAkB,GAE/C,IAAMC,EAAUL,EAAMH,WAChBS,EAAef,YAAYc,GAC3BE,EAAoBhB,aAAaA,YAAYc,IAC7CG,EAAOR,EAAMQ,KAoDnB,OAlDIR,EAAME,MACRD,GAAI,oBAAAR,OAAwBa,EAAxB,oFAAAb,OAIaa,EAJb,oEAAAb,OAQmBc,EARnB,0CAAAd,OASWa,EATX,2FAAAb,OAamBc,EAbnB,oCAAAd,OAcWa,EAdX,+BAkByB,aAApBN,EAAMH,WACfI,GAAI,yRAgBJA,GAAI,mBAAAR,OAAuBY,EAAvB,sBAAAZ,OACQe,EADR,KAAAf,OACgBa,EADhB,gCAAAb,OAGec,EAHf,KAAAd,OAGoCe,EAHpC,KAAAf,OAG4Ca,EAH5C,sBAAAb,OAIOa,EAJP,OAAAb,OAIyBa,EAJzB,+BAAAb,OAOOe,EAPP,QAAAf,OAOkBc,EAPlB,8BAAAd,OAQca,EARd,sBAcCL,GAgBIQ,EAAS,SAAAxB,GAAU,IACtBC,EAAqDD,EAArDC,YAAaE,EAAwCH,EAAxCG,YAAaD,EAA2BF,EAA3BE,YAAaE,EAAcJ,EAAdI,UAEzCqB,EAAmBnB,UAAUA,YAAYJ,IAEzCwB,GADwBpB,aAAaA,YAAYJ,IAC3BI,aAAaA,YAAYF,KAEjDK,EAAM,IAAIkB,IAEdlB,EAAImB,IAAI,SAAU,WAClBnB,EAAImB,IAAI,SAAU,WAClBnB,EAAImB,IAAI,UAAW,WAEnB,IAAIC,EAAM,GAwEV,OAtEAA,GAAG,sEAAArB,OACwBL,EADxB,KAAAK,OACuCiB,EADvC,SAAAjB,OAC+DkB,EAD/D,0DAAAlB,OAEyCL,EAFzC,KAAAK,OAEwDkB,EAFxD,+BAMHzB,EAAYQ,IAAI,SAAAC,GACVA,EAAKO,MACPY,GAAG,eAAArB,OAAmBE,EAAKE,WAAxB,gBAAAJ,OAAiDC,EAAIqB,IACtDpB,EAAKa,MADJ,gBAAAf,OAEaF,YAAYI,EAAKE,YAF9B,WAGyB,aAAnBF,EAAKE,WACdiB,GAAG,uEAEHA,GAAG,oBAAArB,OAAwBE,EAAKE,WAA7B,gBAAAJ,OAAsDC,EAAIqB,IAC3DpB,EAAKa,MADJ,gBAAAf,OAEaF,YAAYI,EAAKE,YAF9B,aAMPiB,GAAG,8BAMHA,GAAG,sFAAArB,OAEiBJ,EAFjB,yEAOHH,EAAYQ,IAAI,SAAAC,GACS,aAAnBA,EAAKE,WACPiB,GAAG,qKAIHA,GAAG,yCAAArB,OAC6BF,YAC9BI,EAAKE,YAFJ,mCAAAJ,OAGgCF,YAAYI,EAAKE,YAHjD,4BAAAJ,OAIOE,EAAKE,WAJZ,6BAAAJ,OAIkDF,YACnDI,EAAKE,YALJ,0BAYPiB,GAAG,2UAckB,IAAIE,GAAcjB,SAASe,EAAK,CACnDG,OAAQ,KACRC,uBAAuB,KAOdC,EAAqB,SAAAC,GAChC,IAAMhC,EAAcG,UAAU6B,EAAMhC,aAC9BD,EAAcI,aAAaA,YAAY6B,EAAMjC,cAC7CE,EAAY+B,EAAM/B,UACpBH,EAAckC,EAAMlC,YAEpBQ,EAAM,IAAIkB,IAEdlB,EAAImB,IAAI,MAAO,UACfnB,EAAImB,IAAI,MAAO,UACfnB,EAAImB,IAAI,MAAO,WAEf,IAAMQ,EAlHgC,SAAAC,GACtC,IAAIC,EAAiBhC,QAAQ+B,EAAc,KACrCE,EAAO,IAAIC,OAAO,KAQxB,OAPAF,EAAiBhC,SAASgC,EAAgB,SAAA5B,GAAI,OAAI6B,EAAKE,KAAK/B,KAC5D4B,EAAiBhC,MAAMgC,EAAgB,SAAA5B,GAAI,OAAIJ,QAAQI,EAAM,KAAK,KAElE4B,EAAiBhC,SAASgC,EAAgB,SAAAI,GACxC,MAAa,KAANA,GAAkB,OAANA,IA2GIC,CAAyB1C,GAElDA,EAAc,GAOd,IANA,IAAM2C,EAAa,CACjB3B,OAAO,EACPE,cAAc,EACdD,mBAAmB,GAGZ2B,EAAI,EAAGA,EAAIT,EAAiBU,OAAQD,GAAK,EAAG,CACnD,IAAIE,EAAM,GACVA,EAAInC,WAAawB,EAAiBS,GAClCE,EAAIxB,KAAOd,EAAIqB,IAAIxB,UAAU8B,EAAiBS,EAAI,IAAIG,UAAU,EAAG,IACnED,EAAIE,IAAMb,EAAiBS,GAE3BE,EAAGG,OAAAC,EAAA,EAAAD,CAAA,GACEH,EACAH,GAGL3C,EAAYmD,KAAKL,GAGnB,MAAO,CAAE5C,cAAaD,cAAaE,YAAWH,kCChQxCoD,UAAaC,IAAbD,UAEFE,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAJ,IACjBE,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAAK,GAAAO,KAAAH,KAAMH,KAQRO,aAAe,SAAAC,GACbA,EAAEC,iBACFR,EAAKD,MAAMU,KAAKC,eAAe,SAACC,EAAKC,GAC9BD,GACHX,EAAKD,MAAMc,iBAAiBD,MAbfZ,EAkBnBc,UAAY,SAAAC,GAEV,OADiBtB,OAAOuB,KAAKD,GAAaE,KAAK,SAAAC,GAAK,OAAIH,EAAYG,MAjBpElB,EAAKmB,MAAQ,GAFInB,qHAyBV,IAAAoB,EAMHlB,KAAKH,MAAMU,KAJbY,EAFKD,EAELC,kBACAC,EAHKF,EAGLE,eAHKF,EAILG,cAJKH,EAKLI,eAGmBtB,KAAKiB,MAAlBM,SAGR,OACEC,EAAAC,EAAAC,cAAA,OAAKhF,UAAU,gBACb8E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,OAAO,WAAWC,SAAU7B,KAAKI,cAGnCoB,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAYC,MAAM,gBACfZ,EAAkB,YAAa,CAC9Ba,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,mCAF9Bf,CAIEK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,iBAK1BZ,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,MAAM,kBACdZ,EAAkB,cAAe,CAChCa,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,qCAF9Bf,CAIEK,EAAAC,EAAAC,cAAChC,EAAD,CAAU2C,KAAM,OAIrBb,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,MAAM,kBACdZ,EAAkB,cAAe,CAChCmB,aAAc,kBACdN,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,qCAH9Bf,CAKEK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,mBAIxBZ,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,CAAWC,MAAM,kBACdZ,EAAkB,cAAe,CAChCa,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,qCAF9Bf,CAIEK,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,YAAY,mBAIxBZ,EAAAC,EAAAC,cAACC,EAAA,EAAKG,KAAN,KACEN,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACI3E,KAAK,UACL4E,SAAS,SACTC,SAAUzC,KAAKY,UAAUQ,MAH7B,oBAjFcsB,aA+FXC,MAAKC,QAALD,CAAc/C,oBChGvBiD,UAAgBC,IAASC,OAIzBC,EAAe,CACnB,CAAEjB,MAAO,MAAOkB,MAAO,SACvB,CAAElB,MAAO,kBAAmBkB,MAAO,qBACnC,CAAElB,MAAO,aAAckB,MAAO,iBAuFjBC,cAnFb,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAkD,IACjBpD,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAA2D,GAAA/C,KAAAH,KAAMH,KAURsD,SAAW,SAACC,EAAQC,GAAiB,IAC3B/G,EAAgBwD,EAAKD,MAArBvD,YAGF2C,EAAa,CACjB3B,OAAO,EACPE,cAAc,EACdD,mBAAkB,GAGpB8F,EAAavG,IAAI,SAAAC,GACfkC,EAAWlC,IAAQ,IAGrBT,EAAY8G,GAAZ7D,OAAAC,EAAA,EAAAD,CAAA,GACKjD,EAAY8G,GACZnE,IA3BYa,EAsCnBwD,uBAAyB,WAAM,IACpBhH,EAAgBwD,EAAKD,MAArBvD,YACTwD,EAAKD,MAAMyD,uBAAuBhH,IAtClCwD,EAAKmB,MAAQ,CACX3E,YAAa,GAEbiH,eAAe,GALAzD,qHA8CV,IAAA0D,EAAAxD,KACE1D,EAAgB0D,KAAKH,MAArBvD,YAEHmH,EAAU,CACd,CACEC,MAAO,cACPC,UAAW,aACXrE,IAAK,cAEP,CACEoE,MAAO,OACPC,UAAW,OACXrE,IAAK,QATO,CAYd,CACEoE,MAAO,aACPpE,IAAK,aACLsE,OAAQ,SAACC,EAAMC,EAAQC,GAAf,OACNvC,EAAAC,EAAAC,cAACmB,EAAD,CACEmB,QAAShB,EACTG,SAAUK,EAAKL,SAASc,KAAKT,EAAMO,QAM3C,OACEvC,EAAAC,EAAAC,cAAA,OAAKhF,UAAU,oBACb8E,EAAAC,EAAAC,cAAA,MAAIhF,UAAU,iBAAd,gBACA8E,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAOT,QAASA,EAASU,WAAY7H,EAAa8H,YAAY,IAC9D5C,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQ3E,KAAK,UAAUyG,QAASrE,KAAKsD,wBAArC,iCA9E4BZ,wCCgBrB4B,sBA3Bb,SAAAA,EAAYzE,GAAO,IAAAC,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAsE,IACjBxE,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAA+E,GAAAnE,KAAAH,KAAMH,KACDoB,MAAQ,GAFInB,qHAOV,IAAAyE,EACmBvE,KAAKH,MAAvB2E,EADDD,EACCC,QAASC,EADVF,EACUE,KACjB,OACEjD,EAAAC,EAAAC,cAACgD,EAAA,EAADnF,OAAAoF,OAAA,GAAeC,IAAf,CAA6BC,MAAOA,IAAOC,KAAMN,EAASO,SAAUN,IACjE,SAAAO,GAAA,IAAGtI,EAAHsI,EAAGtI,UAAWuI,EAAdD,EAAcC,MAAOC,EAArBF,EAAqBE,OAAQC,EAA7BH,EAA6BG,aAAcC,EAA3CJ,EAA2CI,cAA3C,OACC5D,EAAAC,EAAAC,cAAA,OAAKhF,UAAWA,EAAWuI,MAAOA,GAC/BC,EAAOpI,IAAI,SAACuI,EAAMnG,GAAP,OACVsC,EAAAC,EAAAC,cAAA,MAASyD,EAAa,CAAEE,OAAM/F,IAAKJ,IAChCmG,EAAKvI,IAAI,SAACwI,EAAOhG,GAAR,OACRkC,EAAAC,EAAAC,cAAA,OAAU0D,EAAc,CAAEE,QAAOhG,wBAjBvBoD,cCyFb6C,6BA/Eb,SAAAA,EAAY1F,GAAO,IAAAC,EAAA,OAAAP,OAAAQ,EAAA,EAAAR,CAAAS,KAAAuF,IACjBzF,EAAAP,OAAAU,EAAA,EAAAV,CAAAS,KAAAT,OAAAW,EAAA,EAAAX,CAAAgG,GAAApF,KAAAH,KAAMH,KAcRc,iBAAmB,SAAAnC,GAAS,IAAAgH,EAMtBjH,EAAmBC,GAJrBhC,EAFwBgJ,EAExBhJ,YACAD,EAHwBiJ,EAGxBjJ,YACAE,EAJwB+I,EAIxB/I,UACAH,EALwBkJ,EAKxBlJ,YAEFwD,EAAK2F,SAAS,CAAEjJ,cAAaD,cAAaE,YAAWH,iBAtBpCwD,EA0BnBwD,uBAAyB,SAAA5E,GACvBoB,EAAK2F,SAAS,CAAEnJ,YAAaoC,GAAgB,WAC3C,IAAMgH,EAAkBtJ,EAAU0D,EAAKmB,OACjC0E,EAAe9H,EAAOiC,EAAKmB,OAEjCnB,EAAK2F,SAAS,CAAEC,kBAAiBC,oBA7BnC7F,EAAKmB,MAAQ,CACXzE,YAAa,GACbD,YAAa,GACbE,UAAW,GACXH,YAAa,GACboJ,gBAAiB,GACjBC,aAAc,IARC7F,qHAmCV,IAAA8F,EASH5F,KAAKiB,MAHP3E,GANKsJ,EAGLpJ,YAHKoJ,EAILrJ,YAJKqJ,EAKLnJ,UALKmJ,EAMLtJ,aACAoJ,EAPKE,EAOLF,gBACAC,EARKC,EAQLD,aAIF,OACEnE,EAAAC,EAAAC,cAAA,OAAKhF,UAAU,OAGb8E,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQsD,OAAK,EAACC,KAAK,SAASpJ,UAAU,aACpC8E,EAAAC,EAAAC,cAAA,KAAGqE,KAAK,gDAAgDC,OAAO,UAA/D,YAIFxE,EAAAC,EAAAC,cAAA,MAAIhF,UAAU,aAAd,0BAGA8E,EAAAC,EAAAC,cAACuE,EAAD,CAAatF,iBAAkBX,KAAKW,mBAGpCa,EAAAC,EAAAC,cAACwE,EAAD,CACE5J,YAAaA,EACbgH,uBAAwBtD,KAAKsD,yBAI/B9B,EAAAC,EAAAC,cAAA,MAAIhF,UAAU,gBAAd,0BACA8E,EAAAC,EAAAC,cAACyE,EAAD,CAAe3B,QAASkB,EAAiBjB,KAAK,SAG9CjD,EAAAC,EAAAC,cAAA,MAAIhF,UAAU,gBAAd,uBACA8E,EAAAC,EAAAC,cAACyE,EAAD,CAAe3B,QAASmB,EAAclB,KAAK,gBA1EjC/B,cCHE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7C,OAAOpC,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.67aed866.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/index.d41d8cd9.less\";","import * as _ from \"lodash\";\nimport * as beautify from \"js-beautify\";\nimport * as XmlBeautify from \"xml-beautify\";\n\n//ignore entity colunm\nexport const ignoreColumnName = [\n  \"CREATE_TIME\",\n  \"CREATE_USER\",\n  \"LAST_MODIFIED\",\n  \"LAST_MODIFY_USER\",\n  \"TS\",\n  \"DR\"\n];\n\n// Generate Entity\nexport const genEntity = _state => {\n  const { tableSchema, packageName, projectName, tableName } = _state;\n\n  const className = _.upperFirst(_.camelCase(tableName));\n  let result = \"\";\n\n  result += `\n      package com.yonyou.iuap.${_.toLower(projectName)}.entity;\n\n      import java.io.Serializable;\n      import java.math.BigDecimal;\n\n      import javax.persistence.Column;\n      import javax.persistence.Id;\n      import javax.persistence.Table;\n      import javax.persistence.Transient;\n\n      import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n      import com.yonyou.iuap.baseservice.entity.AbsDrModel;\n      import com.yonyou.iuap.baseservice.entity.annotation.Associative;\n      import com.yonyou.iuap.baseservice.entity.annotation.Reference;\n      import com.yonyou.iuap.baseservice.support.condition.Condition;\n      import com.yonyou.iuap.baseservice.support.generator.GeneratedValue;\n      import com.yonyou.iuap.baseservice.multitenant.entity.MultiTenant;\n\n      @JsonIgnoreProperties(ignoreUnknown = true)\n      @Table(name = \"${tableName}\") \n      public class ${className} extends AbsDrModel implements Serializable, MultiTenant{\n\n\n    `;\n\n  tableSchema.map(item => {\n    if (!ignoreColumnName.includes(item.columnName)) {\n      result += getEntityCell(item);\n    }\n  });\n\n  result += \"} \";\n\n  const formattedEntity = beautify.js_beautify(result);\n\n  return formattedEntity;\n};\n\n// Generate Entity Cell\nexport const getEntityCell = _item => {\n  let cell = \"\";\n\n  cell += _item.at_Id ? \"@Id \\n \" : \"\";\n  cell += _item.at_GeneratedValue ? \"@GeneratedValue \\n \" : \"\";\n  cell += _item.at_Condition ? \"@Condition \\n\" : \"\";\n\n  const colName = _item.columnName;\n  const colNameCamel = _.camelCase(colName);\n  const colNameUpperCamel = _.upperFirst(_.camelCase(colName));\n  const type = _item.type;\n\n  if (_item.at_Id) {\n    cell += `protected String ${colNameCamel};\n\n          @Override\n          public String getId() {\n            return ${colNameCamel};\n          }\n\n          @Override\n          public void set${colNameUpperCamel}(Serializable id) {\n            this.${colNameCamel} = id.toString();\n            super.id = id;\n          }\n\n          public void set${colNameUpperCamel}(String id) {\n            this.${colNameCamel} = id;\n          }\n\n    `;\n  } else if (_item.columnName == \"TENANT_ID\") {\n    cell += `\n      \n      @Condition\n      @Column(name = \"TENANT_ID\")\n      private String tenantid;\n\n      public String getTenantid() {\n        return this.tenantid;\n      }\n\n      public void setTenantid(String tenantid) {\n        this.tenantid = tenantid;\n      }\n\n      `;\n  } else {\n    cell += `@Column(name = \"${colName}\")\n      private ${type} ${colNameCamel};  \n\n      public void set${colNameUpperCamel}(${type} ${colNameCamel}) {\n        this.${colNameCamel} = ${colNameCamel};\n      }\n\n      public ${type} get${colNameUpperCamel}() {\n        return this.${colNameCamel};\n      }\n\n    `;\n  }\n\n  return cell;\n};\n\nexport const formatTableSchemaToArray = _tableSchema => {\n  let preprocessData = _.split(_tableSchema, \"[\");\n  const patt = new RegExp(\"]\");\n  preprocessData = _.filter(preprocessData, item => patt.test(item));\n  preprocessData = _.map(preprocessData, item => _.split(item, \"]\")[0]);\n\n  preprocessData = _.filter(preprocessData, o => {\n    return o !== \"\" && o !== \"\\n\";\n  });\n\n  return preprocessData;\n};\n\nexport const genXML = _state => {\n  const { tableSchema, packageName, projectName, tableName } = _state;\n\n  const lowerProjectName = _.toLower(_.camelCase(projectName));\n  const upperCamelProjectname = _.upperFirst(_.camelCase(projectName));\n  const upperCamelTableName = _.upperFirst(_.camelCase(tableName));\n\n  let map = new Map();\n\n  map.set(\"String\", \"VARCHAR\");\n  map.set(\"Double\", \"DECIMAL\");\n  map.set(\"Integer\", \"INTEGER\");\n\n  let xml = \"\";\n\n  xml += `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <mapper namespace=\"${packageName}.${lowerProjectName}.dao.${upperCamelTableName}Mapper\">\n        <resultMap id=\"BaseResultMap\" type=\"${packageName}.${upperCamelTableName}.entity.MachineD18\">\n\n   `;\n\n  tableSchema.map(item => {\n    if (item.at_Id) {\n      xml += `<id column=\"${item.columnName}\" jdbcType=\"${map.get(\n        item.type\n      )}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\n    } else if (item.columnName == \"TENANT_ID\") {\n      xml += `<result column=\"TENANT_ID\" jdbcType=\"VARCHAR\" property=\"tenantid\" />`;\n    } else {\n      xml += ` <result column=\"${item.columnName}\" jdbcType=\"${map.get(\n        item.type\n      )}\" property=\"${_.camelCase(item.columnName)}\" /> \\n`;\n    }\n  });\n\n  xml += `\n   </resultMap>\n  \n\n  `;\n\n  xml += `\n    <select id=\"selectAllByPage\" resultMap=\"BaseResultMap\">\n    SELECT t.* FROM ${tableName} t WHERE 1 =1 and t.dr=0\n      <if test=\"condition != null\">\n\n    `;\n\n  tableSchema.map(item => {\n    if (item.columnName == \"TENANT_ID\") {\n      xml += `   <if test=\"condition.searchMap.tenantid!=null and condition.searchMap.tenantid!='' \">\n        and t.TENANT_ID = #{condition.searchMap.tenantid}\n      </if> `;\n    } else {\n      xml += `\n      <if test=\"condition.searchMap.${_.camelCase(\n        item.columnName\n      )}!=null and condition.searchMap.${_.camelCase(item.columnName)}!='' \">\n        and t.${item.columnName} = #{condition.searchMap.${_.camelCase(\n        item.columnName\n      )}}\n      </if>\n    `;\n    }\n  });\n\n  xml += `\n      </if>\n        order by ts desc\n        <if test=\"page != null\">\n          <if test=\"page.sort!=null\">\n            <foreach collection=\"page.sort\" item=\"item\" separator=\" \">\n              ,\\$\\{item.property} \\$\\{item.direction}\n            </foreach>\n          </if>\n        </if>\n      </select>\n    </mapper>\n  `;\n\n  const formattedXml = new XmlBeautify().beautify(xml, {\n    indent: \"  \", //indent pattern like white spaces\n    useSelfClosingElement: true //true:use self-closing element when empty element.\n  });\n\n  return formattedXml;\n};\n\n// Set Seeting Config For Setting Comp Data\nexport const formateConfigParam = _data => {\n  const packageName = _.toLower(_data.packageName);\n  const projectName = _.upperFirst(_.camelCase(_data.projectName));\n  const tableName = _data.tableName;\n  let tableSchema = _data.tableSchema;\n\n  let map = new Map();\n\n  map.set(\"VAR\", \"String\");\n  map.set(\"DEC\", \"Double\");\n  map.set(\"INT\", \"Integer\");\n\n  const tableSchemaArray = formatTableSchemaToArray(tableSchema);\n\n  tableSchema = [];\n  const annotation = {\n    at_Id: false,\n    at_Condition: false,\n    at_GeneratedValue: false\n  };\n\n  for (let i = 0; i < tableSchemaArray.length; i += 2) {\n    let obj = {};\n    obj.columnName = tableSchemaArray[i];\n    obj.type = map.get(_.toUpper(tableSchemaArray[i + 1]).substring(0, 3));\n    obj.key = tableSchemaArray[i];\n\n    obj = {\n      ...obj,\n      ...annotation\n    };\n\n    tableSchema.push(obj);\n  }\n\n  return { packageName, projectName, tableName, tableSchema };\n};\n","import React, { Component } from \"react\";\n\nimport { Form, Input, Button, Radio } from \"antd\";\nimport * as _ from \"lodash\";\n\nimport \"./index.scss\";\n\nconst { TextArea } = Input;\n\nclass SettingArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    // this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) { \n        this.props.setSettingConfig(values);\n      }\n    });\n  };\n\n  hasErrors = fieldsError => {\n    const hasError = Object.keys(fieldsError).some(field => fieldsError[field]);\n    return hasError;\n  };\n\n \n\n  render() {\n    const {\n      getFieldDecorator,\n      getFieldsError,\n      getFieldError,\n      isFieldTouched\n    } = this.props.form;\n\n    const { hasError } = this.state;\n \n\n    return (\n      <div className=\"setting-area\">\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n          {/* # Table Name */}\n     \n            <Form.Item  label=\"# Table Name\">\n              {getFieldDecorator(\"tableName\", {\n                rules: [\n                  { required: true, message: \"Please input your Table Name!\" }\n                ]\n              })(<Input placeholder=\"table name\" />)}\n            </Form.Item>\n         \n\n          {/* # Table Schema */}\n          <Form.Item label=\"# Table Schema\">\n            {getFieldDecorator(\"tableSchema\", {\n              rules: [\n                { required: true, message: \"Please input your Table Schema!\" }\n              ]\n            })(<TextArea rows={10} />)}\n          </Form.Item>\n\n          {/* # Package Name */}\n          <Form.Item label=\"# Package Name\">\n            {getFieldDecorator(\"packageName\", {\n              initialValue: 'com.yonyou.iuap',\n              rules: [\n                { required: true, message: \"Please input your Package Name!\" }\n              ]\n            })(<Input placeholder=\"package name\" />)}\n          </Form.Item>\n\n          {/* # Project Name */}\n          <Form.Item label=\"# Project Name\">\n            {getFieldDecorator(\"projectName\", {\n              rules: [\n                { required: true, message: \"Please input your Project Name!\" }\n              ]\n            })(<Input placeholder=\"project name\" />)}\n          </Form.Item>\n\n          {/* Submit Button  */}\n          <Form.Item>\n            <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                disabled={this.hasErrors(getFieldsError())}\n            >\n                Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Form.create()(SettingArea);\n","import React, { Component } from \"react\";\n\nimport { Table, Divider, Tag } from \"antd\";\nimport { Checkbox } from \"antd\";\nimport { Button } from 'antd';\n\nimport \"./index.scss\";\n\nconst CheckboxGroup = Checkbox.Group;\n\n// const plainOptions = ['@Id', '@Condition', '@3333'];\n\nconst plainOptions = [\n  { label: \"@Id\", value: \"at_Id\" },\n  { label: \"@GeneratedValue\", value: \"at_GeneratedValue\" },\n  { label: \"@Condition\", value: \"at_Condition\" }\n];\n\nclass AnnotationConfigTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tableSchema: [],\n\n      indeterminate: true\n    };\n  }\n\n  componentDidMount() {}\n\n  onChange = (_index, _checkedData) => { \n    const { tableSchema } = this.props;\n\n \n    const annotation = {\n      at_Id: false,\n      at_Condition: false,\n      at_GeneratedValue:false\n    };\n\n    _checkedData.map(item => {\n      annotation[item] = true;\n    });\n\n    tableSchema[_index] = {\n      ...tableSchema[_index],\n      ...annotation\n    };\n\n \n\n    // this.setState({ tableSchema });\n\n  \n  };\n\n\n  updateAnnotationConfig = () => {\n     const { tableSchema } = this.props;\n    this.props.updateAnnotationConfig(tableSchema)\n  }\n\n\n\n\n  render() { \n    const {  tableSchema } = this.props;\n\n    const columns = [\n      {\n        title: \"Column Name\",\n        dataIndex: \"columnName\",\n        key: \"columnName\"\n      },\n      {\n        title: \"Type\",\n        dataIndex: \"type\",\n        key: \"type\"\n      },\n      ,\n      {\n        title: \"Annotation\",\n        key: \"Annotation\",\n        render: (text, record, index) => (\n          <CheckboxGroup\n            options={plainOptions}\n            onChange={this.onChange.bind(this, index)}\n          />\n        )\n      }\n    ];\n\n    return (\n      <div className=\"annotation-table\">\n        <h1 className=\"text-gradient\">@ Annotation</h1>\n        <Table columns={columns} dataSource={tableSchema} pagination={false} />\n        <Button type=\"primary\" onClick={this.updateAnnotationConfig}>Generate Entity & XML</Button>\n      </div>\n    );\n  }\n}\n\nexport default AnnotationConfigTable;\n","import React, { Component } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from 'prism-react-renderer/themes/nightOwl'\n\nimport \"./index.less\";\n\nclass HighlightCode extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const { codeStr, lang } = this.props;\n    return (\n      <Highlight {...defaultProps} theme={theme} code={codeStr} language={lang}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    );\n  }\n}\n\nexport default HighlightCode;\n","import React, { Component } from \"react\";\n\nimport * as _ from \"lodash\";\nimport * as beautify from \"js-beautify\";\nimport * as XmlBeautify from \"xml-beautify\";\nimport { Button } from 'antd';\n\nimport { genEntity, formateConfigParam, genXML } from \"./util/generator.js\";\nimport SettingArea from \"./components/SettingArea/\";\nimport AnnotationConfigTable from \"./components/AnnotationConfigTable/\";\nimport HighlightCode from \"./components/HighlightCode/\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      packageName: \"\",\n      projectName: \"\",\n      tableName: \"\",\n      tableSchema: [],\n      formattedEntity: \"\",\n      formattedXml: \"\"\n    };\n  }\n\n  componentDidMount() {}\n\n  // Set Seeting Config For Setting Comp Data\n  setSettingConfig = _data => {\n    const {\n      packageName,\n      projectName,\n      tableName,\n      tableSchema\n    } = formateConfigParam(_data);\n    this.setState({ packageName, projectName, tableName, tableSchema });\n  };\n\n  // Update Annotation Config For Config Table Comp\n  updateAnnotationConfig = _tableSchema => {\n    this.setState({ tableSchema: _tableSchema }, () => {\n      const formattedEntity = genEntity(this.state);\n      const formattedXml = genXML(this.state);\n\n      this.setState({ formattedEntity, formattedXml });\n    });\n  };\n\n  render() {\n\n    const {\n      packageName,\n      projectName,\n      tableName,\n      tableSchema,\n      formattedEntity,\n      formattedXml\n    } = this.state;\n\n\n    return (\n      <div className=\"App\">\n        {/* Github Button */}\n\n        <Button ghost icon=\"github\" className=\"githubBtn\">\n          <a href=\"https://github.com/openopen114/gen-entity-web\" target=\"_blank\"> Github</a>\n        </Button>\n\n        {/* Title */}\n        <h1 className=\"app-title\">ENTITY & XML GENERATOR</h1>\n\n        {/* Setting Area*/}\n        <SettingArea setSettingConfig={this.setSettingConfig} />\n\n        {/* Annotation Config Table*/}\n        <AnnotationConfigTable\n          tableSchema={tableSchema}\n          updateAnnotationConfig={this.updateAnnotationConfig}\n        />\n\n        {/* Entity Result */}\n        <h1 className=\"result-title\">Generate Entity Result</h1>\n        <HighlightCode codeStr={formattedEntity} lang=\"java\" />\n\n        {/* XML Result */}\n        <h1 className=\"result-title\">Generate XML Result</h1>\n        <HighlightCode codeStr={formattedXml} lang=\"xml\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}